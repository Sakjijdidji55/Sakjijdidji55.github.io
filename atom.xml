<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>迷路的小朋友</title>
  
  <subtitle>吃好喝好, 玩好, 睡好</subtitle>
  <link href="https://sakjijdidji55.github.io/atom.xml" rel="self"/>
  
  <link href="https://sakjijdidji55.github.io/"/>
  <updated>2025-03-10T13:46:56.302Z</updated>
  <id>https://sakjijdidji55.github.io/</id>
  
  <author>
    <name>欣冻</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c语言学习--1</title>
    <link href="https://sakjijdidji55.github.io/posts/c-study-1.html"/>
    <id>https://sakjijdidji55.github.io/posts/c-study-1.html</id>
    <published>2025-03-10T12:50:20.000Z</published>
    <updated>2025-03-10T13:46:56.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="c语言学习—1"><a href="#c语言学习—1" class="headerlink" title="c语言学习—1"></a>c语言学习—1</h2><p>欢迎来到c语言学习，本篇是c语言学习的第一篇，主要介绍c语言的基础知识，包括c语言规范 、变量、常量、运算符、控制语句、函数、数组、字符串等。</p><h3 id="一，c语言规范"><a href="#一，c语言规范" class="headerlink" title="一，c语言规范"></a>一，c语言规范</h3><p><strong><em>以下是阿里c语言规范</em></strong></p><ol><li><p><strong>缩进</strong></p><ul><li>使用空格进行缩进，每次缩进4个空格</li><li>代码块的分界符（如大括号）前后都需要加空格</li><li>条件语句、循环语句、函数定义等语句的左大括号前不加空格，右大括号独占一行</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>命名</strong></p><ul><li>变量名、函数名、宏定义等遵循驼峰命名法，如<code>myVariable</code>、<code>myFunction</code>、<code>MY_MACRO</code>等</li><li>常量名、宏定义等全部大写，单词之间用下划线分隔，如<code>MY_CONSTANT</code>、<code>MAX_VALUE</code>等</li><li>函数名和变量名不要使用保留字</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myVariable = <span class="number">10</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VALUE 100</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>注释</strong></p><ul><li>使用<code>//</code>进行单行注释，使用<code>/* */</code>进行多行注释</li><li>注释内容要简洁明了，不要包含多余的空格或换行符</li><li>注释要放在代码的上方或右侧，不要放在代码的中间或下方</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 这是一个多行注释</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="type">int</span> myVariable = <span class="number">10</span>; <span class="comment">// 这是一个变量</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>代码风格</strong></p><ul><li>代码风格要统一，不要混用不同的风格</li><li>代码行长度不要超过80个字符，超过的部分可以使用换行符进行分割</li><li>代码块之间要留出空行，以增加可读性</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myVariable = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 这是一个变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>代码审查</strong></p><ul><li>在代码提交之前要进行代码审查，检查代码是否符合规范，是否存在错误或漏洞</li><li>学会使用ai</li><li>代码审查时要关注代码的可读性、可维护性、安全性等方面</li></ul></li><li><p><strong>避免魔法数字</strong></p><ul><li>避免在代码中使用魔法数字，即直接使用数字常量，而是使用有意义的变量或常量来代替</li><li>这样可以提高代码的可读性和可维护性</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 魔法数字</span></span><br><span class="line"><span class="type">int</span> myArray[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    myArray[i] = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用常量代替魔法数字</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ARRAY_SIZE = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> myArray[ARRAY_SIZE];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++) &#123;</span><br><span class="line">    myArray[i] = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>避免重复代码</strong></p><ul><li>避免在代码中重复编写相同的代码，可以使用函数、宏定义、模板等手段来减少重复代码</li><li>这样可以提高代码的可读性和可维护性</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重复代码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printGoodbye</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Goodbye, world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用函数代替重复代码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printMessage</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line">printMessage(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">printMessage(<span class="string">&quot;Goodbye, world!&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="二，变量"><a href="#二，变量" class="headerlink" title="二，变量"></a>二，变量</h3><p>变量是程序中用于存储数据的容器。在C语言中，变量必须先声明后使用，并且每个变量都有一个特定的类型，用于指定它可以存储的数据类型。</p><p>声明变量时，需要指定变量的类型和变量名。例如，以下代码声明了一个名为<code>myVariable</code>的整数变量：</p><ol><li><strong>整数</strong></li></ol><p>这里先了解数字在电脑的存储方式</p><p>例如：<br>3：00000011<br>-3：11111101</p><p>这里的首位是符号位，0表示正数，1表示负数<br>当为unsigned 时，就没有符号位</p><p>一个字节（8位）可以表示256个数，-128~127</p><p>像int 4个字节，二进制位数为32位，可以表示2^32个数，-2^31~2^31-1</p><div class="table-container"><table><thead><tr><th>类型</th><th>存储大小</th><th>描述</th></tr></thead><tbody><tr><td>int</td><td>4字节</td><td>32位有符号</td></tr><tr><td>short int</td><td>2字节</td><td>16位有符号</td></tr><tr><td>unsigned int</td><td>4字节</td><td>32位无符号</td></tr><tr><td>unsigned short int</td><td>2字节</td><td>16位无符号</td></tr><tr><td>long long int</td><td>8字节</td><td>64位有符号</td></tr><tr><td>unsigned long long int</td><td>8字节</td><td>64位无符号</td></tr></tbody></table></div><ol><li><strong>浮点数</strong></li></ol><div class="table-container"><table><thead><tr><th>类型</th><th>存储大小</th><th>范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>1.2E-38 到 3.4E+38</td></tr><tr><td>double</td><td>8字节</td><td>2.3E-308 到 1.7E+308</td></tr><tr><td>long double</td><td>16字节</td><td>3.4E-4932 到 1.1E+4932</td></tr></tbody></table></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> myFloatVariable;</span><br><span class="line"><span class="type">double</span> myDoubleVariable;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> myLongDoubleVariable;</span><br></pre></td></tr></table></figure><ol><li><strong>字符</strong></li></ol><div class="table-container"><table><thead><tr><th>类型</th><th>存储大小</th><th>范围</th></tr></thead><tbody><tr><td>char</td><td>1字节</td><td>-128 到 127 或 0 到 255</td></tr></tbody></table></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> myCharVariable;</span><br></pre></td></tr></table></figure><ol><li><strong>布尔值</strong></li></ol><div class="table-container"><table><thead><tr><th>类型</th><th>存储大小</th><th>范围</th></tr></thead><tbody><tr><td>_Bool</td><td>1字节</td><td>0 或 1</td></tr></tbody></table></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">_Bool</span> myBoolVariable;</span><br></pre></td></tr></table></figure><ol><li><strong>指针</strong></li></ol><p>上面基础数据类型加*就是指针类型，指针是指向内存地址的变量，用于存储变量的地址。指针类型由基础数据类型加上*号表示，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* myVariable;</span><br></pre></td></tr></table></figure><h3 id="三，常量"><a href="#三，常量" class="headerlink" title="三，常量"></a>三，常量</h3><p>常量是程序中固定不变的值，一旦定义就不能修改。在C语言中，常量可以分为字面常量和符号常量。使用const关键字可以定义常量。</p><ol><li><strong>字面常量</strong></li></ol><p>字面常量是直接在代码中出现的常量值，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> myVariable = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ol><li><strong>符号常量</strong></li></ol><p>符号常量是通过<code>#define</code>指令定义的常量，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br></pre></td></tr></table></figure><h3 id="四，运算符"><a href="#四，运算符" class="headerlink" title="四，运算符"></a>四，运算符</h3><p>运算符是用于对变量和常量进行运算的符号。C语言中包含多种运算符，包括算术运算符、关系运算符、逻辑运算符、位运算符等。</p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td>+</td><td>加法运算符</td><td>算术运算符</td></tr><tr><td>-</td><td>减法运算符</td><td>算术运算符</td></tr><tr><td>*</td><td>乘法运算符</td><td>算术运算符</td></tr><tr><td>/</td><td>除法运算符</td><td>算术运算符</td></tr><tr><td>%</td><td>取模运算符</td><td>算术运算符</td></tr><tr><td>==</td><td>等于运算符</td><td>关系运算符</td></tr><tr><td>!=</td><td>不等于运算符</td><td>关系运算符</td></tr><tr><td>&gt;</td><td>大于运算符</td><td>关系运算符</td></tr><tr><td>&lt;</td><td>小于运算符</td><td>关系运算符</td></tr><tr><td>&gt;=</td><td>大于等于运算符</td><td>关系运算符</td></tr><tr><td>&lt;=</td><td>小于等于运算符</td><td>关系运算符</td></tr><tr><td>&amp;&amp;</td><td>逻辑与运算符</td><td>逻辑运算符</td></tr><tr><td></td><td></td><td></td><td>逻辑或运算符</td><td>逻辑运算符</td></tr><tr><td>!</td><td>逻辑非运算符</td><td>逻辑运算符</td></tr><tr><td>&amp;</td><td>按位与运算符</td><td>位运算符</td></tr><tr><td>\</td><td></td><td>按位或运算符</td><td>位运算符</td></tr><tr><td>^</td><td>按位异或运算符</td><td>位运算符</td></tr><tr><td>~</td><td>按位取反运算符</td><td>位运算符</td></tr><tr><td>&lt;&lt;</td><td>左移运算符</td><td>位运算符</td></tr><tr><td>&gt;&gt;</td><td>右移运算符</td><td>位运算符</td></tr></tbody></table></div><p>优先级：算术运算符 &gt; 关系运算符 &gt; 逻辑运算符 &gt; 位运算符</p><h3 id="五，控制语句"><a href="#五，控制语句" class="headerlink" title="五，控制语句"></a>五，控制语句</h3><p>控制语句用于控制程序的执行流程，包括条件语句、循环语句和跳转语句。</p><ol><li><strong>条件语句</strong></li></ol><p>条件语句用于根据条件的真假来执行不同的代码块。C语言中常用的条件语句有<code>if</code>、<code>if-else</code>和<code>switch</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 如果条件为真，执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果条件为假，执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        <span class="comment">// 如果表达式等于value1，执行这里的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        <span class="comment">// 如果表达式等于value2，执行这里的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 如果表达式不等于任何case，执行这里的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>循环语句</strong></li></ol><p>循环语句用于重复执行一段代码块。C语言中常用的循环语句有<code>for</code>、<code>while</code>和<code>do-while</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; increment) &#123;</span><br><span class="line">    <span class="comment">// 执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 执行这里的代码</span></span><br><span class="line">&#125;<span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure><p>注意，do-while循环至少会执行一次代码块，而while循环可能一次也不执行。</p><ol><li><strong>跳转语句</strong></li></ol><p>跳转语句用于改变程序的执行流程，包括<code>break</code>、<code>continue</code>和<code>goto</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>; <span class="comment">// 跳出循环</span></span><br><span class="line"><span class="keyword">continue</span>; <span class="comment">// 跳过当前循环的剩余代码，继续下一次循环</span></span><br><span class="line"><span class="keyword">goto</span> label; <span class="comment">// 跳转到指定的标签处</span></span><br></pre></td></tr></table></figure><h3 id="六，函数"><a href="#六，函数" class="headerlink" title="六，函数"></a>六，函数</h3><p>函数是一段可重复使用的代码块，用于执行特定的任务。C语言中函数分为库函数和用户自定义函数。</p><ol><li><strong>库函数</strong></li></ol><p>库函数是C语言标准库中提供的函数，可以直接在程序中使用，例如<code>printf</code>、<code>scanf</code>等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><strong>用户自定义函数</strong></li></ol><p>用户自定义函数是用户根据需要编写的函数，用于执行特定的任务。函数的定义包括函数名、参数列表和函数体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的int表示函数的返回类型，add是函数名，(int a, int b)是参数列表，return a + b是函数体。<br>调用函数时，需要提供与函数定义中参数列表匹配的参数。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> result = add(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br></pre></td></tr></table></figure><p>这里的add(3, 4)是函数调用，将3和4作为参数传递给add函数，并将返回值赋给result变量。</p><p>注意，函数使用的是值传递，即函数内部对参数的修改不会影响到函数外部的变量。如果需要修改参数的值，可以使用指针或引用。具体在指针讲述。</p><h3 id="七，数组"><a href="#七，数组" class="headerlink" title="七，数组"></a>七，数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myArray[<span class="number">10</span>]; <span class="comment">// 声明一个包含10个整数的数组</span></span><br></pre></td></tr></table></figure><p>变长数组<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">10</span>;<span class="comment">//这里要C99标准</span></span><br><span class="line"><span class="type">int</span> myArray[n]; <span class="comment">// 声明一个包含n个整数的数组</span></span><br></pre></td></tr></table></figure><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* myArray=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*n); <span class="comment">// 声明一个包含n个整数的数组5个整数的数组，并初始化, 这里可以不用c99标准</span></span><br></pre></td></tr></table></figure><br>多维数组<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myArray[<span class="number">3</span>][<span class="number">4</span>]; <span class="comment">// 声明一个3行4列的二维数组</span></span><br></pre></td></tr></table></figure></p><p>注意，你可能听说不省略写数组长度，但是只有第一维可以省略，其他维数不能省略，例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myArray[][<span class="number">4</span>]; <span class="comment">// 声明一个3行4列的二维数组</span></span><br></pre></td></tr></table></figure></p><h3 id="八，字符串"><a href="#八，字符串" class="headerlink" title="八，字符串"></a>八，字符串</h3><p>在C语言中，字符串是由字符组成的数组，以空字符（’\0’）结尾。字符串可以存储在字符数组中，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> myString[] = <span class="string">&quot;Hello, world!&quot;</span>;</span><br></pre></td></tr></table></figure><p>注意，字符串的长度包括空字符，因此上面的字符串长度为13。</p><p>字符串操作函数：</p><ol><li><code>strlen</code>：计算字符串的长度，不包括空字符。</li><li><code>strcpy</code>：复制字符串。</li><li><code>strcat</code>：连接字符串。</li><li><code>strcmp</code>：比较字符串。</li><li><code>strchr</code>：查找字符串中的字符。</li></ol><p>严格意义将，字符串不是一种数据类型，而是一种字符数组。在其他编程语言中，字符串才是一种单独的数据类型，例如Python中的字符串。</p><p>你可以想想’\0’的妙用。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>c语言学习篇一结束，你已经掌握了c语言的几乎所有基础知识，下一篇可以开始学习指针、结构体、文件操作等。<br>注意，c语言学习可以考练习，要多练习写代码。（推荐上<a href="https://leetcode-cn.com/"><strong>力扣</strong></a> 刷题）</p><p>![]<a href="https://i.ejiaimg.cn/252/2025/03/10/67cee3622e5fa.png">https://i.ejiaimg.cn/252/2025/03/10/67cee3622e5fa.png</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;c语言学习—1&quot;&gt;&lt;a href=&quot;#c语言学习—1&quot; class=&quot;headerlink&quot; title=&quot;c语言学习—1&quot;&gt;&lt;/a&gt;c语言学习—1&lt;/h2&gt;&lt;p&gt;欢迎来到c语言学习，本篇是c语言学习的第一篇，主要介绍c语言的基础知识，包括c语言规范 、变量、常量</summary>
      
    
    
    
    <category term="c语言" scheme="https://sakjijdidji55.github.io/categories/c%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="c语言,学习" scheme="https://sakjijdidji55.github.io/tags/c%E8%AF%AD%E8%A8%80-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>力扣重刷篇--2</title>
    <link href="https://sakjijdidji55.github.io/posts/d338dc2b.html"/>
    <id>https://sakjijdidji55.github.io/posts/d338dc2b.html</id>
    <published>2025-03-09T13:00:11.000Z</published>
    <updated>2025-03-09T13:09:00.054Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我的力扣-迷路的小朋友"><a href="#我的力扣-迷路的小朋友" class="headerlink" title="我的力扣: 迷路的小朋友"></a>我的力扣: <a href="https://leetcode.cn/u/cra2y-pascalkin/">迷路的小朋友</a></h3><h2 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a>11. 盛最多水的容器</h2><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。</p><p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p>说明：你不能倾斜容器。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>双指针法，从两端开始向中间遍历，每次移动高度较小的指针，直到两个指针相遇。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>,n=height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(height[i]&lt;height[n<span class="number">-1</span>])&#123;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,(n<span class="number">-1</span>-i)*height[i]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=n<span class="number">-1</span>;j&gt;i;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans&gt;=height[i]*(j-i))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> m=<span class="built_in">min</span>(height[i],height[j]);</span><br><span class="line">                ans=<span class="built_in">max</span>(m*(j-i),ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i.ejiaimg.cn/252/2025/03/02/67c3338d49a1e.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;我的力扣-迷路的小朋友&quot;&gt;&lt;a href=&quot;#我的力扣-迷路的小朋友&quot; class=&quot;headerlink&quot; title=&quot;我的力扣: 迷路的小朋友&quot;&gt;&lt;/a&gt;我的力扣: &lt;a href=&quot;https://leetcode.cn/u/cra2y-pascalkin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>力扣重刷篇--1</title>
    <link href="https://sakjijdidji55.github.io/posts/4a318d91.html"/>
    <id>https://sakjijdidji55.github.io/posts/4a318d91.html</id>
    <published>2025-03-08T13:02:28.000Z</published>
    <updated>2025-03-09T12:54:37.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我的力扣-迷路的小朋友"><a href="#我的力扣-迷路的小朋友" class="headerlink" title="我的力扣: 迷路的小朋友"></a>我的力扣: <a href="https://leetcode.cn/u/cra2y-pascalkin/">迷路的小朋友</a></h3><h1 id="力扣重刷篇—1"><a href="#力扣重刷篇—1" class="headerlink" title="力扣重刷篇—1"></a>力扣重刷篇—1</h1><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>暴力法(O(n^2))：直接两轮for循环遍历数组，找到符合条件的两个数。</li><li>哈希表(O(n))：利用哈希表存储数组元素和索引的映射关系，通过一次遍历数组，判断target - nums[i] 是否在哈希表中，如果存在则返回对应的索引。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>暴力法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    result[<span class="number">0</span>] = i;</span><br><span class="line">                    result[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;hash;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash.<span class="built_in">find</span>(target-nums[i])!=hash.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i,hash[target-nums[i]]&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hash[nums[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a>2. 两数相加</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>遍历两个链表，将对应位置的数字相加，同时记录进位值。</li><li>如果两个链表长度不同，则将较长的链表剩余部分与进位值相加。</li><li>如果最后还有进位值，则需要在结果链表末尾添加一个节点。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode* <span class="title function_">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> &#123;</span><br><span class="line">        ListNode*head=new ListNode();</span><br><span class="line">        ListNode*tail=head;</span><br><span class="line">        <span class="keyword">while</span>(l1||l2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                ListNode*temp=new ListNode(l2-&gt;val);</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">                tail-&gt;next=temp;</span><br><span class="line">                tail=temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l2==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                ListNode*temp=new ListNode(l1-&gt;val);</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">                tail-&gt;next=temp;</span><br><span class="line">                tail=temp;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ListNode*temp=new ListNode(l1-&gt;val+l2-&gt;val);</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">                tail-&gt;next=temp;</span><br><span class="line">                tail=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        tail=head-&gt;next;</span><br><span class="line">        ListNode*temp=head;</span><br><span class="line">        <span class="keyword">for</span>(;tail;tail=tail-&gt;next)&#123;</span><br><span class="line">            tail-&gt;val+=carry;</span><br><span class="line">            carry=tail-&gt;val/<span class="number">10</span>;</span><br><span class="line">            tail-&gt;val%=<span class="number">10</span>;</span><br><span class="line">            temp=temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry)&#123;</span><br><span class="line">            ListNode*tempp=new ListNode(carry);</span><br><span class="line">            temp-&gt;next=tempp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a>3. 无重复字符的最长子串</h2><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>使用滑动窗口的方法，维护一个窗口，窗口内的字符不重复。</li><li>使用一个哈希表来存储窗口内的字符和对应的索引。</li><li>遍历字符串，如果当前字符在窗口内已经存在，则将窗口左边界移动到该字符的下一个位置。</li><li>更新窗口右边界和最长子串长度。</li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;hash;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n&amp;&amp;hash[s[j]]==<span class="number">0</span>)&#123;</span><br><span class="line">            len++;</span><br><span class="line">            hash[s[j]]++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans=len;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n&amp;&amp;j&lt;n)&#123;</span><br><span class="line">            hash[s[i]]--;</span><br><span class="line">            i++;</span><br><span class="line">            len--;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;n&amp;&amp;hash[s[j]]==<span class="number">0</span>)&#123;</span><br><span class="line">                len++;</span><br><span class="line">                hash[s[j]]++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a>4. 寻找两个正序数组的中位数</h2><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,3], nums2 = [2]</span><br><span class="line"></span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 = [1,2,3] ，中位数 2</span><br></pre></td></tr></table></figure><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>将两个数组合并成一个有序数组。</li><li>如果数组的长度为奇数，则中位数为数组的中间元素。</li><li>如果数组的长度为偶数，则中位数为数组的中间两个元素的平均值。</li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nums1Size = nums<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> nums2Size = nums<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums</span><span class="params">(nums1Size + nums2Size)</span></span>;</span><br><span class="line">        <span class="built_in">merge</span>(nums<span class="number">1.</span><span class="built_in">begin</span>(), nums<span class="number">1.</span><span class="built_in">end</span>(), nums<span class="number">2.</span><span class="built_in">begin</span>(), nums<span class="number">2.</span><span class="built_in">end</span>(), nums.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="type">int</span> mid = nums.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>*(nums[mid - <span class="number">1</span>] + nums[mid]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[mid];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h2><p>给你一个字符串 s，找到 s 中最长的回文子串。</p><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>使用动态规划的方法，定义一个二维数组 dp，其中 dp[i][j] 表示 s[i:j+1] 是否为回文子串。</li><li>初始化 dp 数组，对于长度为 1 的子串，dp[i][i] 都为 True。</li></ol><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">dp</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            dp[i][i]=<span class="number">1</span>;</span><br><span class="line">            dp[i<span class="number">-1</span>][i]=s[i<span class="number">-1</span>]==s[i];</span><br><span class="line">            <span class="keyword">if</span>(dp[i<span class="number">-1</span>][i])&#123;</span><br><span class="line">                start=i<span class="number">-1</span>;</span><br><span class="line">                ans=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=j<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==s[j])&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">+1</span>][j<span class="number">-1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(dp[i][j]&amp;&amp;j-i<span class="number">+1</span>&gt;ans)&#123;</span><br><span class="line">                        ans=j-i<span class="number">+1</span>;</span><br><span class="line">                        start=i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-Z-字形变换"><a href="#6-Z-字形变换" class="headerlink" title="6. Z 字形变换"></a>6. Z 字形变换</h2><p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;PAYPALISHIRING&quot;, numRows = 3</span><br><span class="line">输出：&quot;PAHNAPLSIIGYIR&quot;</span><br><span class="line">解释：</span><br><span class="line">- P   A   H   N</span><br><span class="line">- A P L S I I G</span><br><span class="line">- Y   I   R</span><br></pre></td></tr></table></figure><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>使用一个二维数组来存储 Z 字形排列的字符。</li><li>遍历字符串，根据当前字符的行数和方向，将其放入二维数组中。</li></ol><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numRows==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;<span class="built_in">dp</span>(numRows,<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(u&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==numRows)&#123;</span><br><span class="line">                i-=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">for</span>(;i&gt;<span class="number">0</span>&amp;&amp;u&lt;n;i--,u++)&#123;</span><br><span class="line">                    dp[i][j]=s[u];</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(;i&lt;numRows&amp;&amp;u&lt;n;i++,u++)&#123;</span><br><span class="line">                    dp[i][j]=s[u];</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;numRows;k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;j;l++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[k][l])&#123;</span><br><span class="line">                    ans+=dp[k][l];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7. 整数反转"></a>7. 整数反转</h2><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−231, 231 − 1] ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>将整数转换为字符串。</li><li>反转字符串。</li><li>将反转后的字符串转换为整数。</li></ol><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;nums;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">-2147483648</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            t=<span class="number">-1</span>;</span><br><span class="line">            x=-x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(x%<span class="number">10</span>);</span><br><span class="line">            x/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;arr[i]&amp;&amp;a)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;arr[i])&#123;</span><br><span class="line">                    a=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans=ans*<span class="number">10</span>+nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans*t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            ans=ans*<span class="number">10</span>+nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans*t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-字符串转换整数-atoi"><a href="#8-字符串转换整数-atoi" class="headerlink" title="8. 字符串转换整数 (atoi)"></a>8. 字符串转换整数 (atoi)</h2><p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p><ul><li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li><li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li><li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</li></ul><p>注意：本题中的空白字符只包括空格字符 ‘ ‘ 。 不考虑前导空格后剩下的字符串仅由数字和其它字符组成，请根据这个规则返回该字符串可以表示的整数。</p><h3 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;  42&quot;</span><br><span class="line">输出：42</span><br></pre></td></tr></table></figure><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>去除字符串开头的空格。</li><li>判断字符串的第一个字符是否为正号或负号。</li><li>将字符串转换为整数。</li></ol><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> st=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n&amp;&amp;s[i]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            st=<span class="number">-1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n&amp;&amp;s[i]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]&lt;<span class="string">&#x27;0&#x27;</span>||s[i]&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=ans*<span class="number">10</span>+s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(st*ans&gt;<span class="number">2147483647</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2147483647</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(st*ans&lt;<span class="number">-2147483648</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-2147483648</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans*st;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a>9. 回文数</h2><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p><h3 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 121</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>将整数转换为字符串。</li><li>判断字符串是否为回文。</li></ol><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;nums;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(x%<span class="number">10</span>);</span><br><span class="line">            x/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=nums[j])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10. 正则表达式匹配"></a>10. 正则表达式匹配</h2><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p><p>‘.’ 匹配任意单个字符<br>‘*’ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p><h3 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 输入：s = &quot;aa&quot;, p = &quot;a&quot;</span><br><span class="line">- - 输出：false</span><br><span class="line">- - 解释：&quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br></pre></td></tr></table></figure><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>使用动态规划的方法来解决。</li><li>定义一个二维数组 dp，其中 dp[i][j] 表示 s 的前 i 个字符和 p 的前 j 个字符是否匹配。</li><li>初始化 dp 数组，dp[0][0] = true，表示空字符串和空模式匹配。</li><li>遍历 dp 数组，根据 p 的当前字符和前一个字符的不同情况，更新 dp 数组的值。</li></ol><p>当 p[j-1] 是 ‘.’ 或 p[j-1]==s[i-1] 时，dp[i][j] = dp[i-1][j-1]</p><p>当 p[j-1] == “*” 时，dp[i][j] = dp[i][j-2] , 当 p[j-2]==s[i-1] 或 p[j-2] ==’.’ 时， dp[i][j] 也可以等于 dp[i-1][j]</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n1=s.<span class="built_in">size</span>(),n2=p.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">dp</span>(n1<span class="number">+1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n2<span class="number">+1</span>,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n2;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i<span class="number">-1</span>]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                dp[<span class="number">0</span>][i]=dp[<span class="number">0</span>][i<span class="number">-2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n1;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n2;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i<span class="number">-1</span>]==p[j<span class="number">-1</span>]||p[j<span class="number">-1</span>]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(p[j<span class="number">-1</span>]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j]=dp[i][j<span class="number">-2</span>];</span><br><span class="line">                    <span class="keyword">if</span>(s[i<span class="number">-1</span>]==p[j<span class="number">-2</span>]||p[j<span class="number">-2</span>]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                        dp[i][j]|=dp[i<span class="number">-1</span>][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n1][n2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i.ejiaimg.cn/252/2025/03/08/67cc54b9e4116.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;我的力扣-迷路的小朋友&quot;&gt;&lt;a href=&quot;#我的力扣-迷路的小朋友&quot; class=&quot;headerlink&quot; title=&quot;我的力扣: 迷路的小朋友&quot;&gt;&lt;/a&gt;我的力扣: &lt;a href=&quot;https://leetcode.cn/u/cra2y-pascalkin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>图--DFS与BFS</title>
    <link href="https://sakjijdidji55.github.io/posts/3a6c8b24.html"/>
    <id>https://sakjijdidji55.github.io/posts/3a6c8b24.html</id>
    <published>2025-03-05T07:01:37.000Z</published>
    <updated>2025-03-05T12:33:39.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h2><h3 id="直接存边-邻接表"><a href="#直接存边-邻接表" class="headerlink" title="直接存边(邻接表)"></a>直接存边(邻接表)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,k;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k; <span class="comment">// n为顶点数，k为边数</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">graph</span>(n<span class="number">+1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;()); <span class="comment">// n为顶点数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    graph[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法的优点是简单，但难以判断两个顶点之间是否有边相连。</p><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k; <span class="comment">// n为顶点数，k为边数</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">graph</span>(n<span class="number">+1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n<span class="number">+1</span>, <span class="number">0</span>)); <span class="comment">// n为顶点数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    graph[a][b] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法的优点是可以快速判断两个顶点之间是否有边相连，但空间复杂度较高。</p><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="邻接矩阵-1"><a href="#邻接矩阵-1" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph, vector&lt;<span class="type">bool</span>&gt;&amp; visited, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(visited[start]) <span class="keyword">return</span>;</span><br><span class="line">    visited[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(graph[start][i] == <span class="number">1</span> &amp;&amp; !visited[i]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(graph, visited, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph, vector&lt;<span class="type">bool</span>&gt;&amp; visited, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(visited[start]) <span class="keyword">return</span>;</span><br><span class="line">    visited[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i: graph[start]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(graph, visited, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><h3 id="邻接矩阵-2"><a href="#邻接矩阵-2" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n<span class="number">+1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    visited[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> cur = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[cur][i] == <span class="number">1</span> &amp;&amp; !visited[i]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">                visited[i] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="邻接表-1"><a href="#邻接表-1" class="headerlink" title="邻接表"></a>邻接表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n<span class="number">+1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    visited[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> cur = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i: graph[cur]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">                visited[i] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>DFS适合用于寻找连通性，寻找环等。</li><li>BFS适合用于寻找最短路径。</li><li>无论哪种方法，都可以遍历整个图。</li><li>这里的两种图的存储方式，邻接表和邻接矩阵，可以根据实际情况选择。</li></ul><p><img src="https://i.ejiaimg.cn/252/2025/03/02/67c3338db0036.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;图的存储&quot;&gt;&lt;a href=&quot;#图的存储&quot; class=&quot;headerlink&quot; title=&quot;图的存储&quot;&gt;&lt;/a&gt;图的存储&lt;/h2&gt;&lt;h3 id=&quot;直接存边-邻接表&quot;&gt;&lt;a href=&quot;#直接存边-邻接表&quot; class=&quot;headerlink&quot; title=&quot;直</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>回溯算法</title>
    <link href="https://sakjijdidji55.github.io/posts/376d0826.html"/>
    <id>https://sakjijdidji55.github.io/posts/376d0826.html</id>
    <published>2025-03-01T15:48:33.000Z</published>
    <updated>2025-03-01T16:38:47.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回溯算法介绍与基本使用"><a href="#回溯算法介绍与基本使用" class="headerlink" title="回溯算法介绍与基本使用"></a>回溯算法介绍与基本使用</h1><h2 id="1-什么是回溯算法？"><a href="#1-什么是回溯算法？" class="headerlink" title="1. 什么是回溯算法？"></a>1. 什么是回溯算法？</h2><p>回溯算法（Backtracking）是一种通过<strong>试错</strong>来寻找问题解决方案的算法思想。它通过逐步构建候选解，并在确定当前路径无法得到有效解时，<strong>回溯</strong>到上一步尝试其他可能的路径。回溯算法常用于解决<strong>组合优化</strong>、<strong>排列组合</strong>、<strong>子集生成</strong>等需要遍历所有可能性的问题。</p><hr><h2 id="2-回溯算法的基本思想"><a href="#2-回溯算法的基本思想" class="headerlink" title="2. 回溯算法的基本思想"></a>2. 回溯算法的基本思想</h2><ol><li><strong>试错思想</strong>：通过递归或迭代逐步构建候选解</li><li><strong>剪枝操作</strong>：当发现当前路径不可能得到解时，提前终止该路径</li><li><strong>状态管理</strong>：在递归过程中维护和恢复状态（通过栈或参数传递）</li></ol><hr><h2 id="3-适用场景"><a href="#3-适用场景" class="headerlink" title="3. 适用场景"></a>3. 适用场景</h2><p>✅ 组合问题：从n个元素中选k个的所有组合<br>✅ 排列问题：全排列、N皇后问题<br>✅ 子集问题：求集合的所有子集<br>✅ 分割问题：字符串分割为回文子串<br>✅ 棋盘问题：数独、单词搜索  </p><hr><h2 id="4-算法基本结构"><a href="#4-算法基本结构" class="headerlink" title="4. 算法基本结构"></a>4. 算法基本结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">路径, 选择列表</span>):</span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        结果集.append(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表:</span><br><span class="line">        <span class="keyword">if</span> 不满足剪枝条件:</span><br><span class="line">            做选择（加入路径）</span><br><span class="line">            backtrack(新路径, 新选择列表)</span><br><span class="line">            撤销选择（从路径移除）</span><br></pre></td></tr></table></figure><hr><h2 id="5-常见回溯算法问题"><a href="#5-常见回溯算法问题" class="headerlink" title="5. 常见回溯算法问题"></a>5. 常见回溯算法问题</h2><h3 id="5-1-全排列问题"><a href="#5-1-全排列问题" class="headerlink" title="5.1 全排列问题"></a>5.1 全排列问题</h3><p>给定一个不含重复数字的数组，返回其所有可能的全排列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">first = <span class="number">0</span></span>):</span><br><span class="line">        <span class="comment"># 所有数都填完了</span></span><br><span class="line">        <span class="keyword">if</span> first == n:</span><br><span class="line">            output.append(nums[:])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(first, n):</span><br><span class="line">            <span class="comment"># 动态维护数组</span></span><br><span class="line">            nums[first], nums[i] = nums[i], nums[first]</span><br><span class="line">            <span class="comment"># 继续递归填下一个数</span></span><br><span class="line">            backtrack(first + <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 撤销操作</span></span><br><span class="line">            nums[first], nums[i] = nums[i], nums[first]</span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    output = []</span><br><span class="line">    backtrack()</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><h3 id="5-2-N皇后问题"><a href="#5-2-N皇后问题" class="headerlink" title="5.2 N皇后问题"></a>5.2 N皇后问题</h3><p>n 皇后问题是指在一个 n×n 的棋盘上放置 n 个皇后，使得它们互不攻击。皇后可以攻击同一行、同一列以及同一对角线上的其他棋子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solveNQueens</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">def</span>(<span class="params">board, row</span>):</span><br><span class="line">        <span class="keyword">if</span> row == n:</span><br><span class="line">            board_as_strings = [<span class="string">&#x27;&#x27;</span>.join(row) <span class="keyword">for</span> row <span class="keyword">in</span> board]</span><br><span class="line">            result.append(board_as_strings)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> isValid(board, row, col):</span><br><span class="line">                board[row][col] = <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">                <span class="keyword">def</span>(board, row + <span class="number">1</span>)</span><br><span class="line">                board[row][col] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">board, row, col</span>):</span><br><span class="line">        <span class="keyword">if</span> board[row][col] == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">            <span class="keyword">if</span> board[i][col] == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i, j = row - <span class="number">1</span>, col + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> j &lt; n:</span><br><span class="line">            <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i, j = row - <span class="number">1</span>, col - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    board = [[<span class="string">&#x27;.&#x27;</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">def</span>(board, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="5-3-子集问题"><a href="#5-3-子集问题" class="headerlink" title="5.3 子集问题"></a>5.3 子集问题</h3><p>给定一个不含重复元素的整数数组 nums ，返回该数组所有可能的子集（幂集）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">first = <span class="number">0</span>, curr = []</span>):</span><br><span class="line">        <span class="comment"># 将当前子集加入结果集</span></span><br><span class="line">        result.append(curr[:])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(first, n):</span><br><span class="line">            <span class="comment"># 将当前元素加入子集</span></span><br><span class="line">            curr.append(nums[i])</span><br><span class="line">            <span class="comment"># 递归生成下一个子集</span></span><br><span class="line">            backtrack(i + <span class="number">1</span>, curr)</span><br><span class="line">            <span class="comment"># 撤销选择</span></span><br><span class="line">            curr.pop()</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    result = []</span><br><span class="line">    backtrack()</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="5-4-分割回文串"><a href="#5-4-分割回文串" class="headerlink" title="5.4 分割回文串"></a>5.4 分割回文串</h3><p>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。返回所有可能的分割方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">s</span>):</span><br><span class="line">        <span class="keyword">return</span> s == s[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">start, path</span>):</span><br><span class="line">        <span class="keyword">if</span> start == n:</span><br><span class="line">            result.append(path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, n):</span><br><span class="line">            <span class="keyword">if</span> isPalindrome(s[start:i + <span class="number">1</span>]):</span><br><span class="line">                backtrack(i + <span class="number">1</span>, path + [s[start:i + <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    result = []</span><br><span class="line">    backtrack(<span class="number">0</span>, [])</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>回溯算法是一种强大的算法思想，适用于解决组合优化、排列组合、子集生成等需要遍历所有可能性的问题。通过递归和剪枝操作，可以有效地减少不必要的计算，提高算法效率。但时间复杂度较高，适用于小规模问题。或者依赖计算机算力</p><p><img src="https://i.ejiaimg.cn/252/2025/03/02/67c3338ddaccc.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回溯算法介绍与基本使用&quot;&gt;&lt;a href=&quot;#回溯算法介绍与基本使用&quot; class=&quot;headerlink&quot; title=&quot;回溯算法介绍与基本使用&quot;&gt;&lt;/a&gt;回溯算法介绍与基本使用&lt;/h1&gt;&lt;h2 id=&quot;1-什么是回溯算法？&quot;&gt;&lt;a href=&quot;#1-什么是回溯</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线段树的概念与算法</title>
    <link href="https://sakjijdidji55.github.io/posts/9b6b78cf.html"/>
    <id>https://sakjijdidji55.github.io/posts/9b6b78cf.html</id>
    <published>2025-02-28T08:42:04.000Z</published>
    <updated>2025-02-28T09:06:41.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>线段树是一种二叉搜索树，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。线段树具有以下性质：</p><ol><li>线段树的每个结点代表一个区间；</li><li>线段树的每个叶结点代表一个长度为1的区间；</li><li>线段树的每个非叶结点代表一个长度大于1的区间；</li><li>线段树的每个非叶结点的左子树代表一个左半区间，右子树代表一个右半区间；</li></ol><p>拥有这种性质的搜索树，时间复杂度是O(logn)，所以线段树是一种高效的数据结构。</p><p>这里，我们用数组来表示线段树，其中数组下标代表结点编号，结点下标为i的结点，其左子结点下标为2i+1，右子结点下标为2i+2。</p><p>本文子问题是记录区间最小值，所以线段树结点中存储的是区间最小值。</p><h2 id="线段树的构建"><a href="#线段树的构建" class="headerlink" title="线段树的构建"></a>线段树的构建</h2><p>线段树的构建过程如下：</p><ol><li>确定线段树的深度，即log2(n)向上取整；</li><li>创建线段树，每个结点包含一个区间和两个子结点；</li></ol><p><strong>代码</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;arr, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start == end) &#123;</span><br><span class="line">        tree[id] = arr[start];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(arr, start, mid, <span class="number">2</span> * id + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(arr, mid + <span class="number">1</span>, end, <span class="number">2</span> * id + <span class="number">2</span>);</span><br><span class="line">    tree[id] = <span class="built_in">fmim</span>(tree[<span class="number">2</span> * id + <span class="number">1</span>] , tree[<span class="number">2</span> * id + <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="线段树的更新"><a href="#线段树的更新" class="headerlink" title="线段树的更新"></a>线段树的更新</h2><p>线段树的更新过程如下：</p><ol><li>找到需要更新的结点；</li><li>更新结点的值；</li><li>更新父结点的值；</li></ol><p><strong>代码</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> id, <span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start == end) &#123;</span><br><span class="line">        tree[id] = val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(index &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">update</span>(arr, start, mid, <span class="number">2</span> * id + <span class="number">1</span>, index, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">update</span>(arr, mid + <span class="number">1</span>, end, <span class="number">2</span> * id + <span class="number">2</span>, index, val);</span><br><span class="line">    &#125;</span><br><span class="line">    tree[id] = <span class="built_in">fmim</span>(tree[<span class="number">2</span> * id + <span class="number">1</span>] , tree[<span class="number">2</span> * id + <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="线段树的查询"><a href="#线段树的查询" class="headerlink" title="线段树的查询"></a>线段树的查询</h2><p>线段树的查询过程如下：</p><ol><li>找到需要查询的区间；</li><li>查询区间内的最小值；</li></ol><p><strong>代码</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> id, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= start &amp;&amp; end &lt;= R) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> res = INT_MAX;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid) &#123;</span><br><span class="line">        res = <span class="built_in">fmim</span>(res, <span class="built_in">query</span>(arr, start, mid, <span class="number">2</span> * id + <span class="number">1</span>, L, R));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid) &#123;</span><br><span class="line">        res = <span class="built_in">fmim</span>(res, <span class="built_in">query</span>(arr, mid + <span class="number">1</span>, end, <span class="number">2</span> * id + <span class="number">2</span>, L, R));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里是基本的线段树算法，如果需要更复杂的操作，可以在此基础上进行扩展。这里暂不赘述。</p><p><img src="https://i.ejiaimg.cn/252/2025/02/24/67bc4b3acc56a.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;线段树是一种二叉搜索树，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。线段树具有以下性质：&lt;/p&gt;
&lt;ol&gt;
&lt;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pygame小游戏---小恐龙跳跃</title>
    <link href="https://sakjijdidji55.github.io/posts/d09342d0.html"/>
    <id>https://sakjijdidji55.github.io/posts/d09342d0.html</id>
    <published>2025-02-27T11:28:40.000Z</published>
    <updated>2025-02-28T08:52:58.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习pygame的第一个小游戏，挺适合做经典谷歌小恐龙跳跃</p><p>仓库地址：<a href="https://github.com/Sakjijdidji55/lost.git">github</a></p><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame <span class="comment"># 将pygame库导入到Python程序中</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">SCREENWIDTH = <span class="number">800</span> <span class="comment"># 窗体宽度</span></span><br><span class="line">SCREENHEIGHT = <span class="number">260</span> <span class="comment"># 窗体高度</span></span><br><span class="line">pygame.init()</span><br><span class="line">window = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))</span><br><span class="line">window.fill((<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;小恐龙&#x27;</span>)</span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">font = pygame.font.Font(<span class="string">&quot;D:\\halloworld\\python\\pygame\\picture2\\字魂狂傲行书(商用需授权).ttf&quot;</span>,<span class="number">30</span>) <span class="comment"># 创建一个字体对象</span></span><br><span class="line">image_konglong = pygame.image.load(<span class="string">&#x27;D:\\halloworld\\python\\pygame\\图片\\u=3409403884,1794930412&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG.jpg&#x27;</span>) <span class="comment"># 加载恐龙图片</span></span><br><span class="line">imgae_ditu = pygame.image.load(<span class="string">&#x27;D:\\halloworld\python\\pygame\\图片\\未标题-5.jpg&#x27;</span>)</span><br><span class="line">image_xianrenzhang = pygame.image.load(<span class="string">&#x27;D:\\halloworld\\python\\pygame\\图片\\仙人掌.jpg&#x27;</span>)</span><br><span class="line">image_yunduo = pygame.image.load(<span class="string">&#x27;D:\\halloworld\\python\\pygame\\图片\\云朵.jpg&#x27;</span>)</span><br><span class="line">image_gameover = pygame.image.load(<span class="string">&#x27;D:\\halloworld\\python\\pygame\\图片\\a3caae54704fd26c8227c51aca9fa7d248bd675f.jpg&#x27;</span>)</span><br><span class="line">use_image_konglong = pygame.transform.scale(image_konglong,(<span class="number">42</span>,<span class="number">42</span>))</span><br><span class="line">use_image_ditu = pygame.transform.scale(imgae_ditu,(<span class="number">1110</span>,<span class="number">375</span>)) </span><br><span class="line">use_image_xianrenzhang = pygame.transform.scale(image_xianrenzhang,(<span class="number">25</span>,<span class="number">47</span>))    </span><br><span class="line">use_image_yunduo = pygame.transform.scale(image_yunduo,(<span class="number">37</span>,<span class="number">26</span>))</span><br><span class="line">use_image_gameover = pygame.transform.scale(image_gameover,(<span class="number">350</span>,<span class="number">200</span>))</span><br><span class="line">music = pygame.mixer.Sound(<span class="string">&#x27;D:\halloworld\python\pygame\music\Lulleaux、Kid Princess - Empty Love.mp3&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Konglong</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.y = <span class="number">90</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">konglongxianshi</span>(<span class="params">self</span>):</span><br><span class="line">        window.blit(use_image_konglong, (<span class="variable language_">self</span>.x, <span class="variable language_">self</span>.y))</span><br><span class="line">        pygame.display.update()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">suaxin</span>(<span class="params">self</span>):</span><br><span class="line">        pygame.draw.rect(window,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),(<span class="variable language_">self</span>.x,<span class="variable language_">self</span>.y,<span class="number">42</span>,<span class="number">42</span>))</span><br><span class="line">        pygame.display.update()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_up</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.y &lt;= <span class="number">90</span> <span class="keyword">and</span> <span class="variable language_">self</span>.y &gt; <span class="number">40</span>: <span class="comment"># 如果站在地上 </span></span><br><span class="line">            <span class="variable language_">self</span>.y = <span class="variable language_">self</span>.y - <span class="number">50</span> <span class="comment"># 以5个像素值向上移动</span></span><br><span class="line">        window.blit(use_image_konglong, (<span class="variable language_">self</span>.x, <span class="variable language_">self</span>.y))</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_down</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.y &lt;=<span class="number">40</span> :</span><br><span class="line">            <span class="variable language_">self</span>.y = <span class="number">90</span></span><br><span class="line">        window.blit(use_image_konglong, (<span class="variable language_">self</span>.x, <span class="variable language_">self</span>.y))</span><br><span class="line">        pygame.display.update()</span><br><span class="line"></span><br><span class="line">yun_place_list = [<span class="number">555</span>,<span class="number">481</span>,<span class="number">564</span>,<span class="number">565</span>,<span class="number">532</span>,<span class="number">478</span>,<span class="number">255</span>,<span class="number">547</span>,<span class="number">775</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>,<span class="number">700</span>,<span class="number">254</span>,<span class="number">845</span>,<span class="number">674</span>]</span><br><span class="line">score = <span class="number">0</span>              </span><br><span class="line">x_very = <span class="number">8</span></span><br><span class="line">yun_x = <span class="number">300</span></span><br><span class="line">map_x = <span class="number">0</span></span><br><span class="line">xainrenzhangn_x = <span class="number">400</span></span><br><span class="line">xainrenzhangn_x2 = <span class="number">700</span></span><br><span class="line">K = pygame.key.get_pressed()</span><br><span class="line">l = Konglong()</span><br><span class="line">pygame.display.flip()</span><br><span class="line">GREEN=(<span class="number">0</span>,<span class="number">200</span>,<span class="number">0</span>)</span><br><span class="line">RED=(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">SHALLOW_GREEN=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)</span><br><span class="line">SHALLOW_RED=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jisuyouxi</span>(<span class="params">GREEN,RED</span>):</span><br><span class="line">    pygame.draw.rect(window, GREEN,(<span class="number">200</span>,<span class="number">180</span>,<span class="number">120</span>,<span class="number">40</span>))</span><br><span class="line">    pygame.draw.rect(window, RED,(<span class="number">500</span>,<span class="number">180</span>,<span class="number">120</span>,<span class="number">40</span>))</span><br><span class="line">    text1 = font.render(<span class="string">&#x27;重新开始&#x27;</span>,<span class="literal">True</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    text2 = font.render(<span class="string">&#x27;退出游戏&#x27;</span>,<span class="literal">True</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    window.blit(text1,(<span class="number">200</span>,<span class="number">180</span>))</span><br><span class="line">    window.blit(text2,(<span class="number">500</span>,<span class="number">180</span>))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jump</span>():</span><br><span class="line">    l.suaxin()</span><br><span class="line">    l.move_up()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    l.suaxin()</span><br><span class="line">    l.move_down()  </span><br><span class="line">t_count = <span class="number">0</span></span><br><span class="line">state=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">music.play(-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">    clock.tick(<span class="number">30</span>)</span><br><span class="line">    text = font.render(<span class="string">&quot;SCORE: &quot;</span> + <span class="built_in">str</span>(score), <span class="literal">True</span>,(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) <span class="comment"># 创建一个文本对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t_count == <span class="number">0</span>:</span><br><span class="line">        score += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> xainrenzhangn_x &lt; -<span class="number">25</span>:</span><br><span class="line">            xainrenzhangn_x = xainrenzhangn_x2 + random.randint(<span class="number">200</span>,<span class="number">300</span>)</span><br><span class="line">        <span class="keyword">if</span> xainrenzhangn_x2 &lt; -<span class="number">25</span>:</span><br><span class="line">                xainrenzhangn_x2 = xainrenzhangn_x + random.randint(<span class="number">200</span>,<span class="number">300</span>)        </span><br><span class="line">        <span class="keyword">if</span> yun_x &lt; -<span class="number">15</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(random.randint(<span class="number">0</span>,<span class="built_in">len</span>(yun_place_list)-<span class="number">1</span>)):</span><br><span class="line">                yun_x = yun_place_list[i]</span><br><span class="line">        window.blit(use_image_ditu,(map_x,-<span class="number">110</span>))</span><br><span class="line">        window.blit(use_image_ditu,(map_x+<span class="number">1110</span>,-<span class="number">110</span>))</span><br><span class="line">        window.blit(use_image_xianrenzhang,(xainrenzhangn_x,<span class="number">86</span>))</span><br><span class="line">        window.blit(use_image_xianrenzhang,(xainrenzhangn_x2,<span class="number">86</span>))</span><br><span class="line">        window.blit(text,(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        window.blit(use_image_yunduo,(yun_x,<span class="number">0</span>)) </span><br><span class="line">        l.konglongxianshi()</span><br><span class="line">        map_x -= x_very</span><br><span class="line">        xainrenzhangn_x -= x_very</span><br><span class="line">        xainrenzhangn_x2 -= x_very</span><br><span class="line">        yun_x -= x_very</span><br><span class="line">        x_very += <span class="number">0.0025</span></span><br><span class="line">        <span class="keyword">if</span> map_x &lt; -<span class="number">500</span>:</span><br><span class="line">            map_x = <span class="number">0</span></span><br><span class="line">        pygame.display.update()</span><br><span class="line">    <span class="keyword">if</span>  xainrenzhangn_x &lt;= <span class="number">35</span> <span class="keyword">and</span> l.y == <span class="number">90</span> <span class="keyword">and</span> xainrenzhangn_x &gt;= -<span class="number">25</span>:</span><br><span class="line">        music.stop()</span><br><span class="line">        t_count = <span class="number">1</span> </span><br><span class="line">        <span class="keyword">if</span> (state==<span class="number">0</span>):</span><br><span class="line">            window.blit(use_image_gameover,(<span class="number">225</span>,<span class="number">30</span>))</span><br><span class="line">            jisuyouxi(GREEN,RED)</span><br><span class="line">            pygame.display.update()</span><br><span class="line">    <span class="keyword">if</span> xainrenzhangn_x2 &lt;= <span class="number">35</span> <span class="keyword">and</span> l.y == <span class="number">90</span> <span class="keyword">and</span> xainrenzhangn_x2 &gt;= -<span class="number">25</span>:</span><br><span class="line">        t_count = <span class="number">1</span></span><br><span class="line">        music.stop()</span><br><span class="line">        <span class="keyword">if</span>(state==<span class="number">0</span>):</span><br><span class="line">            window.blit(use_image_gameover,(<span class="number">225</span>,<span class="number">30</span>))</span><br><span class="line">            jisuyouxi(GREEN,RED)</span><br><span class="line">            pygame.display.update()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            pygame.quit()</span><br><span class="line">            exit() </span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_SPACE <span class="keyword">or</span> event.key == pygame.K_UP:</span><br><span class="line">                t1 = threading.Thread(target=jump)</span><br><span class="line">                t1.start()</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_DOWN:</span><br><span class="line">                l.move_down()</span><br><span class="line">                l.suaxin()</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_RETURN <span class="keyword">and</span> t_count == <span class="number">1</span>:</span><br><span class="line">                music.play(-<span class="number">1</span>)</span><br><span class="line">                t_count = <span class="number">0</span></span><br><span class="line">                score = <span class="number">0</span>              </span><br><span class="line">                yun_x = <span class="number">300</span></span><br><span class="line">                x_very = <span class="number">8</span></span><br><span class="line">                map_x = <span class="number">0</span></span><br><span class="line">                xainrenzhangn_x = <span class="number">400</span></span><br><span class="line">                xainrenzhangn_x2 = <span class="number">600</span></span><br><span class="line">                state=<span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEMOTION:</span><br><span class="line">            x,y = event.pos</span><br><span class="line">            <span class="keyword">if</span> t_count == <span class="number">1</span> <span class="keyword">and</span> <span class="number">200</span> &lt;= x &lt;= <span class="number">320</span> <span class="keyword">and</span> <span class="number">180</span> &lt;= y &lt;= <span class="number">220</span>:</span><br><span class="line">                jisuyouxi(GREEN=SHALLOW_GREEN,RED=RED)</span><br><span class="line">                pygame.display.update()</span><br><span class="line">                state=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> t_count == <span class="number">1</span> <span class="keyword">and</span> <span class="number">500</span> &lt;= x &lt;= <span class="number">620</span> <span class="keyword">and</span> <span class="number">180</span> &lt;= y &lt;= <span class="number">220</span>:</span><br><span class="line">                jisuyouxi(GREEN=GREEN,RED=SHALLOW_RED)</span><br><span class="line">                pygame.display.update() </span><br><span class="line">                state=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                state=<span class="number">0</span></span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONUP:</span><br><span class="line">            x,y = event.pos</span><br><span class="line">            <span class="keyword">if</span> t_count == <span class="number">1</span> <span class="keyword">and</span> <span class="number">200</span> &lt;= x &lt;= <span class="number">320</span> <span class="keyword">and</span> <span class="number">180</span> &lt;= y &lt;= <span class="number">220</span>:</span><br><span class="line">                music.play(-<span class="number">1</span>)</span><br><span class="line">                t_count = <span class="number">0</span></span><br><span class="line">                score = <span class="number">0</span>              </span><br><span class="line">                yun_x = <span class="number">300</span></span><br><span class="line">                x_very = <span class="number">10</span></span><br><span class="line">                map_x = <span class="number">0</span></span><br><span class="line">                xainrenzhangn_x = <span class="number">400</span></span><br><span class="line">                xainrenzhangn_x2 = <span class="number">600</span></span><br><span class="line">                state=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> t_count == <span class="number">1</span> <span class="keyword">and</span> <span class="number">500</span> &lt;= x &lt;= <span class="number">620</span> <span class="keyword">and</span> <span class="number">180</span> &lt;= y &lt;= <span class="number">220</span>:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                exit()</span><br></pre></td></tr></table></figure><h4 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h4><h5 id="1-导入pygame库"><a href="#1-导入pygame库" class="headerlink" title="1. 导入pygame库"></a>1. 导入pygame库</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame <span class="comment"># 将pygame库导入到Python程序中</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure><h5 id="2-初始化pygame"><a href="#2-初始化pygame" class="headerlink" title="2. 初始化pygame"></a>2. 初始化pygame</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.init()</span><br></pre></td></tr></table></figure><h5 id="3-设置窗口大小"><a href="#3-设置窗口大小" class="headerlink" title="3. 设置窗口大小"></a>3. 设置窗口大小</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window = pygame.display.set_mode((<span class="number">1110</span>, <span class="number">200</span>))</span><br></pre></td></tr></table></figure><h5 id="4-加载图片"><a href="#4-加载图片" class="headerlink" title="4. 加载图片"></a>4. 加载图片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use_image_ditu = pygame.image.load(<span class="string">&quot;&quot;</span>)</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h5 id="5-加载音乐"><a href="#5-加载音乐" class="headerlink" title="5. 加载音乐"></a>5. 加载音乐</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">music = pygame.mixer.music.load(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="6-设置窗口标题"><a href="#6-设置窗口标题" class="headerlink" title="6. 设置窗口标题"></a>6. 设置窗口标题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.display.set_caption(<span class="string">&quot;小恐龙跳跃&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="7-创建恐龙类"><a href="#7-创建恐龙类" class="headerlink" title="7. 创建恐龙类"></a>7. 创建恐龙类</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Konglong</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.y = <span class="number">90</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">konglongxianshi</span>(<span class="params">self</span>):</span><br><span class="line">        window.blit(use_image_konglong, (<span class="variable language_">self</span>.x, <span class="variable language_">self</span>.y))</span><br><span class="line">        pygame.display.update()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">suaxin</span>(<span class="params">self</span>):</span><br><span class="line">        pygame.draw.rect(window,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),(<span class="variable language_">self</span>.x,<span class="variable language_">self</span>.y,<span class="number">42</span>,<span class="number">42</span>))</span><br><span class="line">        pygame.display.update()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_up</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.y &lt;= <span class="number">90</span> <span class="keyword">and</span> <span class="variable language_">self</span>.y &gt; <span class="number">40</span>: <span class="comment"># 如果站在地上 </span></span><br><span class="line">            <span class="variable language_">self</span>.y = <span class="variable language_">self</span>.y - <span class="number">50</span> <span class="comment"># 以5个像素值向上移动</span></span><br><span class="line">        window.blit(use_image_konglong, (<span class="variable language_">self</span>.x, <span class="variable language_">self</span>.y))</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_down</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.y &lt;=<span class="number">40</span> :</span><br><span class="line">            <span class="variable language_">self</span>.y = <span class="number">90</span></span><br><span class="line">        window.blit(use_image_konglong, (<span class="variable language_">self</span>.x, <span class="variable language_">self</span>.y))</span><br><span class="line">        pygame.display.update()</span><br></pre></td></tr></table></figure><h5 id="8-基本变量"><a href="#8-基本变量" class="headerlink" title="8. 基本变量"></a>8. 基本变量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">yun_place_list = [<span class="number">555</span>,<span class="number">481</span>,<span class="number">564</span>,<span class="number">565</span>,<span class="number">532</span>,<span class="number">478</span>,<span class="number">255</span>,<span class="number">547</span>,<span class="number">775</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>,<span class="number">700</span>,<span class="number">254</span>,<span class="number">845</span>,<span class="number">674</span>]</span><br><span class="line">score = <span class="number">0</span>              </span><br><span class="line">x_very = <span class="number">8</span></span><br><span class="line">yun_x = <span class="number">300</span></span><br><span class="line">map_x = <span class="number">0</span></span><br><span class="line">xainrenzhangn_x = <span class="number">400</span></span><br><span class="line">xainrenzhangn_x2 = <span class="number">700</span></span><br><span class="line">K = pygame.key.get_pressed()</span><br><span class="line">l = Konglong()</span><br><span class="line">pygame.display.flip()</span><br><span class="line">GREEN=(<span class="number">0</span>,<span class="number">200</span>,<span class="number">0</span>)</span><br><span class="line">RED=(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">SHALLOW_GREEN=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)</span><br><span class="line">SHALLOW_RED=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jisuyouxi</span>(<span class="params">GREEN,RED</span>):</span><br><span class="line">    pygame.draw.rect(window, GREEN,(<span class="number">200</span>,<span class="number">180</span>,<span class="number">120</span>,<span class="number">40</span>))</span><br><span class="line">    pygame.draw.rect(window, RED,(<span class="number">500</span>,<span class="number">180</span>,<span class="number">120</span>,<span class="number">40</span>))</span><br><span class="line">    text1 = font.render(<span class="string">&#x27;重新开始&#x27;</span>,<span class="literal">True</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    text2 = font.render(<span class="string">&#x27;退出游戏&#x27;</span>,<span class="literal">True</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    window.blit(text1,(<span class="number">200</span>,<span class="number">180</span>))</span><br><span class="line">    window.blit(text2,(<span class="number">500</span>,<span class="number">180</span>))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jump</span>():</span><br><span class="line">    l.suaxin()</span><br><span class="line">    l.move_up()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    l.suaxin()</span><br><span class="line">    l.move_down()  </span><br><span class="line">t_count = <span class="number">0</span></span><br><span class="line">state=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">music.play(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="9-游戏循环"><a href="#9-游戏循环" class="headerlink" title="9. 游戏循环"></a>9. 游戏循环</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">    clock.tick(<span class="number">30</span>)</span><br><span class="line">    text = font.render(<span class="string">&quot;SCORE: &quot;</span> + <span class="built_in">str</span>(score), <span class="literal">True</span>,(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) <span class="comment"># 创建一个文本对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t_count == <span class="number">0</span>:</span><br><span class="line">        score += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> xainrenzhangn_x &lt; -<span class="number">25</span>:</span><br><span class="line">            xainrenzhangn_x = xainrenzhangn_x2 + random.randint(<span class="number">200</span>,<span class="number">300</span>)</span><br><span class="line">        <span class="keyword">if</span> xainrenzhangn_x2 &lt; -<span class="number">25</span>:</span><br><span class="line">                xainrenzhangn_x2 = xainrenzhangn_x + random.randint(<span class="number">200</span>,<span class="number">300</span>)        </span><br><span class="line">        <span class="keyword">if</span> yun_x &lt; -<span class="number">15</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(random.randint(<span class="number">0</span>,<span class="built_in">len</span>(yun_place_list)-<span class="number">1</span>)):</span><br><span class="line">                yun_x = yun_place_list[i]</span><br><span class="line">        window.blit(use_image_ditu,(map_x,-<span class="number">110</span>))</span><br><span class="line">        window.blit(use_image_ditu,(map_x+<span class="number">1110</span>,-<span class="number">110</span>))</span><br><span class="line">        window.blit(use_image_xianrenzhang,(xainrenzhangn_x,<span class="number">86</span>))</span><br><span class="line">        window.blit(use_image_xianrenzhang,(xainrenzhangn_x2,<span class="number">86</span>))</span><br><span class="line">        window.blit(text,(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        window.blit(use_image_yunduo,(yun_x,<span class="number">0</span>)) </span><br><span class="line">        l.konglongxianshi()</span><br><span class="line">        map_x -= x_very</span><br><span class="line">        xainrenzhangn_x -= x_very</span><br><span class="line">        xainrenzhangn_x2 -= x_very</span><br><span class="line">        yun_x -= x_very</span><br><span class="line">        x_very += <span class="number">0.0025</span></span><br><span class="line">        <span class="keyword">if</span> map_x &lt; -<span class="number">500</span>:</span><br><span class="line">            map_x = <span class="number">0</span></span><br><span class="line">        pygame.display.update()</span><br><span class="line">    <span class="keyword">if</span>  xainrenzhangn_x &lt;= <span class="number">35</span> <span class="keyword">and</span> l.y == <span class="number">90</span> <span class="keyword">and</span> xainrenzhangn_x &gt;= -<span class="number">25</span>:</span><br><span class="line">        music.stop()</span><br><span class="line">        t_count = <span class="number">1</span> </span><br><span class="line">        <span class="keyword">if</span> (state==<span class="number">0</span>):</span><br><span class="line">            window.blit(use_image_gameover,(<span class="number">225</span>,<span class="number">30</span>))</span><br><span class="line">            jisuyouxi(GREEN,RED)</span><br><span class="line">            pygame.display.update()</span><br><span class="line">    <span class="keyword">if</span> xainrenzhangn_x2 &lt;= <span class="number">35</span> <span class="keyword">and</span> l.y == <span class="number">90</span> <span class="keyword">and</span> xainrenzhangn_x2 &gt;= -<span class="number">25</span>:</span><br><span class="line">        t_count = <span class="number">1</span></span><br><span class="line">        music.stop()</span><br><span class="line">        <span class="keyword">if</span>(state==<span class="number">0</span>):</span><br><span class="line">            window.blit(use_image_gameover,(<span class="number">225</span>,<span class="number">30</span>))</span><br><span class="line">            jisuyouxi(GREEN,RED)</span><br><span class="line">            pygame.display.update()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            pygame.quit()</span><br><span class="line">            exit() </span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_SPACE <span class="keyword">or</span> event.key == pygame.K_UP:</span><br><span class="line">                t1 = threading.Thread(target=jump)</span><br><span class="line">                t1.start()</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_DOWN:</span><br><span class="line">                l.move_down()</span><br><span class="line">                l.suaxin()</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_RETURN <span class="keyword">and</span> t_count == <span class="number">1</span>:</span><br><span class="line">                music.play(-<span class="number">1</span>)</span><br><span class="line">                t_count = <span class="number">0</span></span><br><span class="line">                score = <span class="number">0</span>              </span><br><span class="line">                yun_x = <span class="number">300</span></span><br><span class="line">                x_very = <span class="number">8</span></span><br><span class="line">                map_x = <span class="number">0</span></span><br><span class="line">                xainrenzhangn_x = <span class="number">400</span></span><br><span class="line">                xainrenzhangn_x2 = <span class="number">600</span></span><br><span class="line">                state=<span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEMOTION:</span><br><span class="line">            x,y = event.pos</span><br><span class="line">            <span class="keyword">if</span> t_count == <span class="number">1</span> <span class="keyword">and</span> <span class="number">200</span> &lt;= x &lt;= <span class="number">320</span> <span class="keyword">and</span> <span class="number">180</span> &lt;= y &lt;= <span class="number">220</span>:</span><br><span class="line">                jisuyouxi(GREEN=SHALLOW_GREEN,RED=RED)</span><br><span class="line">                pygame.display.update()</span><br><span class="line">                state=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> t_count == <span class="number">1</span> <span class="keyword">and</span> <span class="number">500</span> &lt;= x &lt;= <span class="number">620</span> <span class="keyword">and</span> <span class="number">180</span> &lt;= y &lt;= <span class="number">220</span>:</span><br><span class="line">                jisuyouxi(GREEN=GREEN,RED=SHALLOW_RED)</span><br><span class="line">                pygame.display.update() </span><br><span class="line">                state=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                state=<span class="number">0</span></span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONUP:</span><br><span class="line">            x,y = event.pos</span><br><span class="line">            <span class="keyword">if</span> t_count == <span class="number">1</span> <span class="keyword">and</span> <span class="number">200</span> &lt;= x &lt;= <span class="number">320</span> <span class="keyword">and</span> <span class="number">180</span> &lt;= y &lt;= <span class="number">220</span>:</span><br><span class="line">                music.play(-<span class="number">1</span>)</span><br><span class="line">                t_count = <span class="number">0</span></span><br><span class="line">                score = <span class="number">0</span>              </span><br><span class="line">                yun_x = <span class="number">300</span></span><br><span class="line">                x_very = <span class="number">10</span></span><br><span class="line">                map_x = <span class="number">0</span></span><br><span class="line">                xainrenzhangn_x = <span class="number">400</span></span><br><span class="line">                xainrenzhangn_x2 = <span class="number">600</span></span><br><span class="line">                state=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> t_count == <span class="number">1</span> <span class="keyword">and</span> <span class="number">500</span> &lt;= x &lt;= <span class="number">620</span> <span class="keyword">and</span> <span class="number">180</span> &lt;= y &lt;= <span class="number">220</span>:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                exit()</span><br></pre></td></tr></table></figure><p><img src="https://i.ejiaimg.cn/252/2025/02/24/67bc7c42d2359.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习pygame的第一个小游戏，挺适合做经典谷歌小恐龙跳跃&lt;/p&gt;
&lt;p&gt;仓库地址：&lt;a href=&quot;https://github.com/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://sakjijdidji55.github.io/posts/735e5788.html"/>
    <id>https://sakjijdidji55.github.io/posts/735e5788.html</id>
    <published>2025-02-26T06:39:30.000Z</published>
    <updated>2025-02-26T12:04:35.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>基础排序算法</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MAOPAOSORT</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">maopaosort</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maopaosort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>() - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(nums[j], nums[j + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n^2)，空间复杂度：O(1)</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CHOICESORT</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">choicesort</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">choiceswap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(nums[i], nums[min]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n^2)，空间复杂度：O(1)</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">INSERTSORT</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">insertsort</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertsort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = nums[i];</span><br><span class="line">            <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; temp) &#123;</span><br><span class="line">                nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n^2)，空间复杂度：O(1)</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MERGESORT</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mergesort</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">temp</span><span class="params">(right - left + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> i=left, j=mid<span class="number">+1</span>, k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;=mid || j&lt;=right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">                temp[k++] = nums[j++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; right) &#123;</span><br><span class="line">                temp[k++] = nums[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &lt; nums[j]) &#123;</span><br><span class="line">                    temp[k++] = nums[i++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    temp[k++] = nums[j++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt; temp.<span class="built_in">size</span>(); p++) &#123;</span><br><span class="line">            nums[left + p] = temp[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = left + ( right - left ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">mergesort</span>(nums, left, mid);</span><br><span class="line">        <span class="built_in">mergesort</span>(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="built_in">merge</span>(nums, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)，空间复杂度：O(n)</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QUICKSORT</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = left, j = right;</span><br><span class="line">        <span class="type">int</span> temp = nums[left];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= temp) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt;= temp) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[j] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i] = temp;</span><br><span class="line">        <span class="built_in">quicksort</span>(nums, left, i - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">quicksort</span>(nums, i + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)，空间复杂度：O(logn)</p><h3 id="猴子排序"><a href="#猴子排序" class="headerlink" title="猴子排序"></a>猴子排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MONKEYSORT</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="built_in">sort</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">monkeysort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isSorted</span>(nums)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="type">int</span> j = <span class="built_in">rand</span>() % nums.<span class="built_in">size</span>();</span><br><span class="line">                <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n!) ，空间复杂度：O(1)</p><p><strong><em>end</em></strong><br><img src="https://i.ejiaimg.cn/252/2025/02/24/67bc7c41ea329.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h2&gt;&lt;p&gt;基础排序算法&lt;/p&gt;
&lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo一键部署脚本与优化</title>
    <link href="https://sakjijdidji55.github.io/posts/d4aa23dc.html"/>
    <id>https://sakjijdidji55.github.io/posts/d4aa23dc.html</id>
    <published>2025-02-25T04:24:02.000Z</published>
    <updated>2025-02-25T04:57:22.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo一键部署脚本与优化"><a href="#hexo一键部署脚本与优化" class="headerlink" title="hexo一键部署脚本与优化"></a>hexo一键部署脚本与优化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接前hexo初步搭建，本文将介绍如何使用一键部署脚本，并对其进行博客优化。</p><h2 id="butterfly主题优化"><a href="#butterfly主题优化" class="headerlink" title="butterfly主题优化"></a>butterfly主题优化</h2><h3 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h3><h4 id="1，下载butterfly主题"><a href="#1，下载butterfly主题" class="headerlink" title="1，下载butterfly主题"></a>1，下载butterfly主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h4 id="2，修改主题配置文件"><a href="#2，修改主题配置文件" class="headerlink" title="2，修改主题配置文件"></a>2，修改主题配置文件</h4><p>在博客主文件夹创建<code>_config.butterfly.yml</code>文件，并修改主题配置文件<code>_config.yml</code>，将主题修改为butterfly。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></p><p>并且进入<code>node_modules</code>,找到<code>hexo-theme-butterfly</code>文件夹，将<code>_config.yml</code>文件复制到博客主文件夹的<code>_config.butterfly.yml</code>。</p><p>这个时候，你的博客应该已经成功切换到butterfly主题了。</p><p>使用hexo命令启动本地服务器，访问<code>http://localhost:4000</code>，即可预览你的博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="3，主题优化"><a href="#3，主题优化" class="headerlink" title="3，主题优化"></a>3，主题优化</h4><h5 id="3-1，设置头像"><a href="#3-1，设置头像" class="headerlink" title="3.1，设置头像"></a>3.1，设置头像</h5><p>在<code>_config.butterfly.yml</code>中，找到<code>avatar</code>，将<code>url</code>修改为你的头像链接。</p><h5 id="3-2，设置博客信息"><a href="#3-2，设置博客信息" class="headerlink" title="3.2，设置博客信息"></a>3.2，设置博客信息</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">迷路的小朋友</span> <span class="comment"># 博客标题</span></span><br><span class="line"><span class="attr">subtitle:</span>  <span class="comment"># 博客副标题</span></span><br><span class="line"><span class="attr">description:</span>  <span class="comment"># 博客描述</span></span><br><span class="line"><span class="attr">keywords:</span>  <span class="comment"># 博客关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">欣冻</span> <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span>  <span class="comment"># 时区</span></span><br></pre></td></tr></table></figure><h5 id="3-3，设置博客背景"><a href="#3-3，设置博客背景" class="headerlink" title="3.3，设置博客背景"></a>3.3，设置博客背景</h5><p>在<code>_config.butterfly.yml</code>中，找到<code>background_image</code>，将<code>url</code>修改为你的背景链接。</p><p>这样你的博客基础优化完成，更深度优化可以参考<a href="https://butterfly.js.org/posts/4a6c45f7/">官方文档</a>。<br>另外，这位大佬的<a href="https://blog.anheyu.com/posts/sdxhu.html">博客</a>有更多关于butterfly主题的优化，感谢大佬。</p><h3 id="一键部署脚本"><a href="#一键部署脚本" class="headerlink" title="一键部署脚本"></a>一键部署脚本</h3><h4 id="1，创建一键部署脚本"><a href="#1，创建一键部署脚本" class="headerlink" title="1，创建一键部署脚本"></a>1，创建一键部署脚本</h4><p>在博客主文件夹创建python脚本，名字随意（建议<code>一键部署.py</code>）：</p><h4 id="2，脚本内容"><a href="#2，脚本内容" class="headerlink" title="2，脚本内容"></a>2，脚本内容</h4><h5 id="2-1，引入库"><a href="#2-1，引入库" class="headerlink" title="2.1，引入库"></a>2.1，引入库</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br></pre></td></tr></table></figure><h5 id="2-2，定义要执行的命令"><a href="#2-2，定义要执行的命令" class="headerlink" title="2.2，定义要执行的命令"></a>2.2，定义要执行的命令</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义要执行的命令</span></span><br><span class="line">commands = [<span class="string">&#x27;hexo cl&#x27;</span>, <span class="string">&#x27;hexo g&#x27;</span>, <span class="string">&#x27;hexo d&#x27;</span>]</span><br></pre></td></tr></table></figure><h5 id="2-3，执行命令"><a href="#2-3，执行命令" class="headerlink" title="2.3，执行命令"></a>2.3，执行命令</h5><h6 id="2-3-1，设置PowerShell执行策略"><a href="#2-3-1，设置PowerShell执行策略" class="headerlink" title="2.3.1，设置PowerShell执行策略"></a>2.3.1，设置PowerShell执行策略</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">poewr_state=subprocess.run([<span class="string">&#x27;powershell&#x27;</span>,<span class="string">&#x27;-Command&#x27;</span>,<span class="string">&#x27;Set-ExecutionPolicy -Scope Process -ExecutionPolicy RemoteSigned&#x27;</span>], shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> poewr_state.returncode == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;PowerShell 执行策略已设置为 RemoteSigned&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;PowerShell 执行策略设置失败&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="2-3-2，循环执行命令"><a href="#2-3-2，循环执行命令" class="headerlink" title="2.3.2，循环执行命令"></a>2.3.2，循环执行命令</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="comment"># 进入博客目录</span></span><br><span class="line">os.chdir(<span class="string">&#x27;E:/BlogFloder&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;执行命令: <span class="subst">&#123;command&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="comment"># 执行命令</span></span><br><span class="line">    poewr_state=subprocess.run(command, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> poewr_state.returncode == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;命令执行成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;命令执行失败！&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> poewr_state.returncode == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;部署完成！用时：<span class="subst">&#123;time.time() - start_time&#125;</span>秒&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3，运行脚本"><a href="#3，运行脚本" class="headerlink" title="3，运行脚本"></a>3，运行脚本</h4><p>在命令行中，进入博客主文件夹，执行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python 一键部署.py</span><br></pre></td></tr></table></figure><p>即可一键部署博客。</p><p><img src="https://i.ejiaimg.cn/252/2025/02/24/67bc7c42ecc2d.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo一键部署脚本与优化&quot;&gt;&lt;a href=&quot;#hexo一键部署脚本与优化&quot; class=&quot;headerlink&quot; title=&quot;hexo一键部署脚本与优化&quot;&gt;&lt;/a&gt;hexo一键部署脚本与优化&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    
    <category term="一键部署，butterfly" scheme="https://sakjijdidji55.github.io/tags/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%EF%BC%8Cbutterfly/"/>
    
  </entry>
  
  <entry>
    <title>链表的二分查找--跳表</title>
    <link href="https://sakjijdidji55.github.io/posts/c23cf668.html"/>
    <id>https://sakjijdidji55.github.io/posts/c23cf668.html</id>
    <published>2025-02-24T12:39:25.000Z</published>
    <updated>2025-02-24T13:10:13.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言：链表的二分查找"><a href="#前言：链表的二分查找" class="headerlink" title="前言：链表的二分查找"></a>前言：链表的二分查找</h2><p>链表与数组相比，最大的优势在于插入和删除操作的时间复杂度是O(1)，但是查找操作的时间复杂度是O(n)。如果需要频繁进行查找操作，那么链表的时间复杂度就会很高。为了解决这个问题，我们可以使用二分查找的思想来优化链表的查找操作。</p><p>这里介绍一种基于链表和二分查找思想的跳表（Skip List）数据结构。跳表是一种随机化的数据结构，它通过在链表上建立多级索引来加速查找操作。跳表的时间复杂度是O(logn)，与平衡树的时间复杂度相当，但是实现起来更简单。</p><h2 id="跳表的基本概念"><a href="#跳表的基本概念" class="headerlink" title="跳表的基本概念"></a>跳表的基本概念</h2><p>跳表是一种随机化的数据结构，它通过在链表上建立多级索引来加速查找操作。跳表的基本思想是将链表分成多个层次，每一层都是一个有序的链表。在最高层，链表中的元素是全局有序的，而在低层，链表中的元素是有序的，但是排序的范围更小。通过这种方式，我们可以快速定位到目标元素所在的区间，从而加速查找操作。</p><h2 id="跳表的实现"><a href="#跳表的实现" class="headerlink" title="跳表的实现"></a>跳表的实现</h2><h3 id="1，skipnode节点"><a href="#1，skipnode节点" class="headerlink" title="1，skipnode节点"></a>1，skipnode节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">down</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2，skipList类"><a href="#2，skipList类" class="headerlink" title="2，skipList类"></a>2，skipList类</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SkipList</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">head</span>;</span></span><br><span class="line">    <span class="type">int</span> level;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3，创建跳表节点"><a href="#3，创建跳表节点" class="headerlink" title="3，创建跳表节点"></a>3，创建跳表节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> SkipNode *<span class="title function_">createSkipNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">node</span> =</span> (<span class="keyword">struct</span> SkipNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> SkipNode));</span><br><span class="line">    node -&gt; val = val;</span><br><span class="line">    node -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">    node -&gt; down = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4，创建跳表"><a href="#4，创建跳表" class="headerlink" title="4，创建跳表"></a>4，创建跳表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> SkipList *<span class="title function_">createSkipList</span><span class="params">()</span> &#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>)); <span class="comment">// 初始化随机数种子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipList</span> *<span class="title">list</span> =</span> (<span class="keyword">struct</span> SkipList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> SkipList));</span><br><span class="line">    <span class="built_in">list</span> -&gt; head = createSkipNode(INT_MIN);</span><br><span class="line">    <span class="built_in">list</span> -&gt; level = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5，生成随机层数"><a href="#5，生成随机层数" class="headerlink" title="5，生成随机层数"></a>5，生成随机层数</h3><p>这里的MID_COUNT是一个经验值，可以根据实际情况进行调整（在一定数值时最快，一般在10到20之间最快速）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_LEVEL = <span class="number">64</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MID_COUNT = <span class="number">2</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">randomLevel</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> level = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (rand() % MID_COUNT == <span class="number">0</span> &amp;&amp; level &lt; MAX_LEVEL) &#123;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6，插入节点"><a href="#6，插入节点" class="headerlink" title="6，插入节点"></a>6，插入节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertSkipList</span><span class="params">(<span class="keyword">struct</span> SkipList *<span class="built_in">list</span>, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="type">int</span> level = randomLevel();</span><br><span class="line">    <span class="keyword">if</span>( level &gt; <span class="built_in">list</span> -&gt; level) &#123;</span><br><span class="line">        <span class="keyword">for</span>(; <span class="built_in">list</span> -&gt; level &lt; level; <span class="built_in">list</span> -&gt; level++)&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">newNode</span> =</span> createSkipNode(<span class="built_in">list</span> -&gt; head -&gt; val);</span><br><span class="line">            newNode -&gt; down = <span class="built_in">list</span> -&gt; head;</span><br><span class="line">            <span class="built_in">list</span> -&gt; head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">update</span>[<span class="title">list</span> -&gt;</span> level];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">cur</span> =</span> <span class="built_in">list</span> -&gt; head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">list</span> -&gt; level - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span>(cur -&gt; next != <span class="literal">NULL</span> &amp;&amp; cur -&gt; next -&gt; val &lt; val) &#123;</span><br><span class="line">            cur = cur -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        update[i] = cur;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">newNode</span> =</span> createSkipNode(val);</span><br><span class="line">        newNode -&gt; next = update[i] -&gt; next;</span><br><span class="line">        update[i] -&gt; next = newNode;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            newNode -&gt; down = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7，查找节点"><a href="#7，查找节点" class="headerlink" title="7，查找节点"></a>7，查找节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">searchSkipList</span><span class="params">(<span class="keyword">struct</span> SkipList *<span class="built_in">list</span>, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">cur</span> =</span> <span class="built_in">list</span> -&gt; head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">list</span> -&gt; level - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span>(cur -&gt; next &amp;&amp; cur -&gt; next -&gt; val &lt; val) &#123;</span><br><span class="line">            cur = cur -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur -&gt; next &amp;&amp; cur -&gt; next -&gt; val == val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8，删除节点"><a href="#8，删除节点" class="headerlink" title="8，删除节点"></a>8，删除节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">deleteSkipList</span><span class="params">(<span class="keyword">struct</span> SkipList *<span class="built_in">list</span>, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">cur</span> =</span> <span class="built_in">list</span> -&gt; head;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">list</span> -&gt; level - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span>(cur -&gt; next &amp;&amp; cur -&gt; next -&gt; val &lt; val) &#123;</span><br><span class="line">            cur = cur -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur -&gt; next &amp;&amp; cur -&gt; next -&gt; val == val) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">temp</span> =</span> cur -&gt; next;</span><br><span class="line">            cur -&gt; next = cur -&gt; next -&gt; next;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = <span class="built_in">list</span> -&gt; head;</span><br><span class="line">    <span class="keyword">while</span>(cur -&gt; next == <span class="literal">NULL</span> &amp;&amp; <span class="built_in">list</span> -&gt; level &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">temp</span> =</span> cur;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        <span class="built_in">list</span> -&gt; level--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9，打印跳表"><a href="#9，打印跳表" class="headerlink" title="9，打印跳表"></a>9，打印跳表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printSkipList</span><span class="params">(<span class="keyword">struct</span> SkipList *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">cur</span> =</span> <span class="built_in">list</span> -&gt; head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">list</span> -&gt; level - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(; cur -&gt; next != <span class="literal">NULL</span>; cur = cur -&gt; next) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur -&gt; next-&gt; val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10，释放内存"><a href="#10，释放内存" class="headerlink" title="10，释放内存"></a>10，释放内存</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">freeSkipList</span><span class="params">(<span class="keyword">struct</span> SkipList *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">cur</span> =</span> <span class="built_in">list</span> -&gt; head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">temp</span>;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">list</span> -&gt; level - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        temp = cur -&gt; next;</span><br><span class="line">        <span class="keyword">for</span>(;temp; ) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">temp2</span> =</span> temp;</span><br><span class="line">            temp = temp -&gt; next;</span><br><span class="line">            <span class="built_in">free</span>(temp2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">temp3</span> =</span> cur;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">        <span class="built_in">free</span>(temp3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.ejiaimg.cn/252/2025/02/24/67bc4d83b1297.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：链表的二分查找&quot;&gt;&lt;a href=&quot;#前言：链表的二分查找&quot; class=&quot;headerlink&quot; title=&quot;前言：链表的二分查找&quot;&gt;&lt;/a&gt;前言：链表的二分查找&lt;/h2&gt;&lt;p&gt;链表与数组相比，最大的优势在于插入和删除操作的时间复杂度是O(1)，但是查找</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo初步部署日记</title>
    <link href="https://sakjijdidji55.github.io/posts/fc1c519d.html"/>
    <id>https://sakjijdidji55.github.io/posts/fc1c519d.html</id>
    <published>2025-02-23T02:24:02.000Z</published>
    <updated>2025-02-23T13:54:36.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo初步部署日记"><a href="#hexo初步部署日记" class="headerlink" title="hexo初步部署日记"></a>hexo初步部署日记</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>hexo是一款基于node.js的静态博客框架，可以快速生成静态网页托管在github上(最重要的是不用花钱)。</p><p><a href="https://github.com/">github官网</a></p><h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h2><p><a href="https://nodejs.org/en/download/">下载地址</a></p><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2. 安装git"></a>2. 安装git</h2><p><a href="https://git-scm.com/downloads">下载地址</a></p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><p>这里需要管理员权限，在终端打开管理员cmd或者win+x打开管理员powershell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果出现报错，输入下面代码(注意这是powershell时用，不是cmd)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -Scope Process -ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><h2 id="4-检查是否成功安装"><a href="#4-检查是否成功安装" class="headerlink" title="4. 检查是否成功安装"></a>4. 检查是否成功安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>出现版本号即成功安装</p><h2 id="5-配置用户名和链接到你的邮箱"><a href="#5-配置用户名和链接到你的邮箱" class="headerlink" title="5. 配置用户名和链接到你的邮箱"></a>5. 配置用户名和链接到你的邮箱</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-创建ssh密钥"><a href="#6-创建ssh密钥" class="headerlink" title="6. 创建ssh密钥"></a>6. 创建ssh密钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><h2 id="7-添加ssh密钥到github"><a href="#7-添加ssh密钥到github" class="headerlink" title="7. 添加ssh密钥到github"></a>7. 添加ssh密钥到github</h2><p>打开C:\Users\用户名.ssh\id_rsa.pub文件，复制里面的内容，打开github，点击右上角头像，点击settings，点击SSH and GPG keys，点击New SSH key，title任意，将刚刚复制的内容粘贴进key，点击Add SSH key</p><p><img src="https://i.ejiaimg.cn/252/2025/02/23/67bb24660e8a9.png" alt=""></p><h2 id="8-测试是否连接成功"><a href="#8-测试是否连接成功" class="headerlink" title="8. 测试是否连接成功"></a>8. 测试是否连接成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi yourname! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>即成功连接(注意要关掉加速器)</p><h2 id="9-创建仓库"><a href="#9-创建仓库" class="headerlink" title="9. 创建仓库"></a>9. 创建仓库</h2><p><strong><em>仓库名为yourname.github.io</em></strong>，注意要勾选Initialize this repository with a README(添加一个md文件)</p><h2 id="10-配置hexo"><a href="#10-配置hexo" class="headerlink" title="10. 配置hexo"></a>10. 配置hexo</h2><p>创建一个文件夹，用于存放博客文件</p><p>打开文件夹，右键点击更多打开Git Bash Here，也可以用powershell不过需进入文件夹</p><p>如果使用powershell，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> yourpath</span><br><span class="line"></span><br><span class="line">Set-ExecutionPolicy -Scope Process -ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>接下来二者一致</p><p><strong><em>输入</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo init</span><br></pre></td></tr></table></figure><h2 id="11-配置-config-yml"><a href="#11-配置-config-yml" class="headerlink" title="11. 配置_config.yml"></a>11. 配置_config.yml</h2><p>打开_config.yml文件，在底部1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git(你的仓库链接)</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>注意格式</p><h2 id="12-生成静态文件"><a href="#12-生成静态文件" class="headerlink" title="12. 生成静态文件"></a>12. 生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="13-本地预览"><a href="#13-本地预览" class="headerlink" title="13. 本地预览"></a>13. 本地预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器，输入localhost:4000，即可看到你的博客</p><h2 id="14-部署"><a href="#14-部署" class="headerlink" title="14. 部署"></a>14. 部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br></pre></td></tr></table></figure><p>即部署成功</p><h2 id="14-打开博客"><a href="#14-打开博客" class="headerlink" title="14. 打开博客"></a>14. 打开博客</h2><p>打开浏览器，输入yourname.github.io，即可看到你的博客(注意需要等待一段时间)</p><h2 id="15-更新博客"><a href="#15-更新博客" class="headerlink" title="15. 更新博客"></a>15. 更新博客</h2><p>在source文件夹下新建一个md文件，用markdown语法写文章</p><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;filename&quot;</span></span><br></pre></td></tr></table></figure><p>写完后保存，打开终端，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>即更新成功</p><p>最后，若是出现报错，请不要担心，可能是网络问题，多试几次即可</p><p><img src="https://i.ejiaimg.cn/252/2025/02/23/67bb0ea6828d9.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo初步部署日记&quot;&gt;&lt;a href=&quot;#hexo初步部署日记&quot; class=&quot;headerlink&quot; title=&quot;hexo初步部署日记&quot;&gt;&lt;/a&gt;hexo初步部署日记&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="hexo, github, blog, node.js,npm,git,部署博客,hexo部署" scheme="https://sakjijdidji55.github.io/tags/hexo-github-blog-node-js-npm-git-%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2-hexo%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>FirstPessage</title>
    <link href="https://sakjijdidji55.github.io/posts/7eff628e.html"/>
    <id>https://sakjijdidji55.github.io/posts/7eff628e.html</id>
    <published>2025-02-21T09:50:49.000Z</published>
    <updated>2025-02-24T10:38:25.437Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开启博客新征程"><a href="#开启博客新征程" class="headerlink" title="开启博客新征程"></a>开启博客新征程</h3><p>​    今天，我的初创博客正式上线了。</p><p>​    这是一次发文尝试，也是标志成功搭建博客。</p><p>​    以下是平台的主要菜单选项，通过这些菜单，你可以快速进入不同的页面，开启追番之旅。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">追番:</span> <span class="string">/bangumis/index.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>Home（首页）</strong>：链接为 <code>/</code> ，点击这个选项，你可以回到平台的首页，在这里你可以浏览到平台的最新动态、推荐内容等。图标为 <code>fas fa-home</code> ，代表着 “家” 的概念，方便你随时回到起始页面。</p></li><li><p><strong>追番</strong>：链接是 <code>/bangumis/index.html</code> ，这个页面是追番的核心区域。在这里，你可以找到各种各样的动漫作品，无论是热门新番还是经典老番，都能满足你的追番需求。同样，图标也是 <code>fas fa-home</code> ，便于你识别和点击。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;开启博客新征程&quot;&gt;&lt;a href=&quot;#开启博客新征程&quot; class=&quot;headerlink&quot; title=&quot;开启博客新征程&quot;&gt;&lt;/a&gt;开启博客新征程&lt;/h3&gt;&lt;p&gt;​    今天，我的初创博客正式上线了。&lt;/p&gt;
&lt;p&gt;​    这是一次发文尝试，也是标志成功搭建</summary>
      
    
    
    
    
    <category term="大家好，我是迷路的小朋友" scheme="https://sakjijdidji55.github.io/tags/%E5%A4%A7%E5%AE%B6%E5%A5%BD%EF%BC%8C%E6%88%91%E6%98%AF%E8%BF%B7%E8%B7%AF%E7%9A%84%E5%B0%8F%E6%9C%8B%E5%8F%8B/"/>
    
  </entry>
  
</feed>
