<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>迷路的小朋友</title>
  
  <subtitle>吃好喝好, 玩好, 睡好</subtitle>
  <link href="https://sakjijdidji55.github.io/atom.xml" rel="self"/>
  
  <link href="https://sakjijdidji55.github.io/"/>
  <updated>2025-02-25T04:57:22.078Z</updated>
  <id>https://sakjijdidji55.github.io/</id>
  
  <author>
    <name>欣冻</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo一键部署脚本与优化</title>
    <link href="https://sakjijdidji55.github.io/posts/d4aa23dc.html"/>
    <id>https://sakjijdidji55.github.io/posts/d4aa23dc.html</id>
    <published>2025-02-25T04:24:02.000Z</published>
    <updated>2025-02-25T04:57:22.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo一键部署脚本与优化"><a href="#hexo一键部署脚本与优化" class="headerlink" title="hexo一键部署脚本与优化"></a>hexo一键部署脚本与优化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接前hexo初步搭建，本文将介绍如何使用一键部署脚本，并对其进行博客优化。</p><h2 id="butterfly主题优化"><a href="#butterfly主题优化" class="headerlink" title="butterfly主题优化"></a>butterfly主题优化</h2><h3 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h3><h4 id="1，下载butterfly主题"><a href="#1，下载butterfly主题" class="headerlink" title="1，下载butterfly主题"></a>1，下载butterfly主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h4 id="2，修改主题配置文件"><a href="#2，修改主题配置文件" class="headerlink" title="2，修改主题配置文件"></a>2，修改主题配置文件</h4><p>在博客主文件夹创建<code>_config.butterfly.yml</code>文件，并修改主题配置文件<code>_config.yml</code>，将主题修改为butterfly。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></p><p>并且进入<code>node_modules</code>,找到<code>hexo-theme-butterfly</code>文件夹，将<code>_config.yml</code>文件复制到博客主文件夹的<code>_config.butterfly.yml</code>。</p><p>这个时候，你的博客应该已经成功切换到butterfly主题了。</p><p>使用hexo命令启动本地服务器，访问<code>http://localhost:4000</code>，即可预览你的博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="3，主题优化"><a href="#3，主题优化" class="headerlink" title="3，主题优化"></a>3，主题优化</h4><h5 id="3-1，设置头像"><a href="#3-1，设置头像" class="headerlink" title="3.1，设置头像"></a>3.1，设置头像</h5><p>在<code>_config.butterfly.yml</code>中，找到<code>avatar</code>，将<code>url</code>修改为你的头像链接。</p><h5 id="3-2，设置博客信息"><a href="#3-2，设置博客信息" class="headerlink" title="3.2，设置博客信息"></a>3.2，设置博客信息</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">迷路的小朋友</span> <span class="comment"># 博客标题</span></span><br><span class="line"><span class="attr">subtitle:</span>  <span class="comment"># 博客副标题</span></span><br><span class="line"><span class="attr">description:</span>  <span class="comment"># 博客描述</span></span><br><span class="line"><span class="attr">keywords:</span>  <span class="comment"># 博客关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">欣冻</span> <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span>  <span class="comment"># 时区</span></span><br></pre></td></tr></table></figure><h5 id="3-3，设置博客背景"><a href="#3-3，设置博客背景" class="headerlink" title="3.3，设置博客背景"></a>3.3，设置博客背景</h5><p>在<code>_config.butterfly.yml</code>中，找到<code>background_image</code>，将<code>url</code>修改为你的背景链接。</p><p>这样你的博客基础优化完成，更深度优化可以参考<a href="https://butterfly.js.org/posts/4a6c45f7/">官方文档</a>。<br>另外，这位大佬的<a href="https://blog.anheyu.com/posts/sdxhu.html">博客</a>有更多关于butterfly主题的优化，感谢大佬。</p><h3 id="一键部署脚本"><a href="#一键部署脚本" class="headerlink" title="一键部署脚本"></a>一键部署脚本</h3><h4 id="1，创建一键部署脚本"><a href="#1，创建一键部署脚本" class="headerlink" title="1，创建一键部署脚本"></a>1，创建一键部署脚本</h4><p>在博客主文件夹创建python脚本，名字随意（建议<code>一键部署.py</code>）：</p><h4 id="2，脚本内容"><a href="#2，脚本内容" class="headerlink" title="2，脚本内容"></a>2，脚本内容</h4><h5 id="2-1，引入库"><a href="#2-1，引入库" class="headerlink" title="2.1，引入库"></a>2.1，引入库</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br></pre></td></tr></table></figure><h5 id="2-2，定义要执行的命令"><a href="#2-2，定义要执行的命令" class="headerlink" title="2.2，定义要执行的命令"></a>2.2，定义要执行的命令</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义要执行的命令</span></span><br><span class="line">commands = [<span class="string">&#x27;hexo cl&#x27;</span>, <span class="string">&#x27;hexo g&#x27;</span>, <span class="string">&#x27;hexo d&#x27;</span>]</span><br></pre></td></tr></table></figure><h5 id="2-3，执行命令"><a href="#2-3，执行命令" class="headerlink" title="2.3，执行命令"></a>2.3，执行命令</h5><h6 id="2-3-1，设置PowerShell执行策略"><a href="#2-3-1，设置PowerShell执行策略" class="headerlink" title="2.3.1，设置PowerShell执行策略"></a>2.3.1，设置PowerShell执行策略</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">poewr_state=subprocess.run([<span class="string">&#x27;powershell&#x27;</span>,<span class="string">&#x27;-Command&#x27;</span>,<span class="string">&#x27;Set-ExecutionPolicy -Scope Process -ExecutionPolicy RemoteSigned&#x27;</span>], shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> poewr_state.returncode == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;PowerShell 执行策略已设置为 RemoteSigned&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;PowerShell 执行策略设置失败&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="2-3-2，循环执行命令"><a href="#2-3-2，循环执行命令" class="headerlink" title="2.3.2，循环执行命令"></a>2.3.2，循环执行命令</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="comment"># 进入博客目录</span></span><br><span class="line">os.chdir(<span class="string">&#x27;E:/BlogFloder&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;执行命令: <span class="subst">&#123;command&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="comment"># 执行命令</span></span><br><span class="line">    poewr_state=subprocess.run(command, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> poewr_state.returncode == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;命令执行成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;命令执行失败！&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> poewr_state.returncode == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;部署完成！用时：<span class="subst">&#123;time.time() - start_time&#125;</span>秒&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3，运行脚本"><a href="#3，运行脚本" class="headerlink" title="3，运行脚本"></a>3，运行脚本</h4><p>在命令行中，进入博客主文件夹，执行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python 一键部署.py</span><br></pre></td></tr></table></figure><p>即可一键部署博客。</p><p><img src="https://i.ejiaimg.cn/252/2025/02/24/67bc7c42ecc2d.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo一键部署脚本与优化&quot;&gt;&lt;a href=&quot;#hexo一键部署脚本与优化&quot; class=&quot;headerlink&quot; title=&quot;hexo一键部署脚本与优化&quot;&gt;&lt;/a&gt;hexo一键部署脚本与优化&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    
    <category term="一键部署，butterfly" scheme="https://sakjijdidji55.github.io/tags/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%EF%BC%8Cbutterfly/"/>
    
  </entry>
  
  <entry>
    <title>链表的二分查找--跳表</title>
    <link href="https://sakjijdidji55.github.io/posts/c23cf668.html"/>
    <id>https://sakjijdidji55.github.io/posts/c23cf668.html</id>
    <published>2025-02-24T12:39:25.000Z</published>
    <updated>2025-02-24T13:10:13.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言：链表的二分查找"><a href="#前言：链表的二分查找" class="headerlink" title="前言：链表的二分查找"></a>前言：链表的二分查找</h2><p>链表与数组相比，最大的优势在于插入和删除操作的时间复杂度是O(1)，但是查找操作的时间复杂度是O(n)。如果需要频繁进行查找操作，那么链表的时间复杂度就会很高。为了解决这个问题，我们可以使用二分查找的思想来优化链表的查找操作。</p><p>这里介绍一种基于链表和二分查找思想的跳表（Skip List）数据结构。跳表是一种随机化的数据结构，它通过在链表上建立多级索引来加速查找操作。跳表的时间复杂度是O(logn)，与平衡树的时间复杂度相当，但是实现起来更简单。</p><h2 id="跳表的基本概念"><a href="#跳表的基本概念" class="headerlink" title="跳表的基本概念"></a>跳表的基本概念</h2><p>跳表是一种随机化的数据结构，它通过在链表上建立多级索引来加速查找操作。跳表的基本思想是将链表分成多个层次，每一层都是一个有序的链表。在最高层，链表中的元素是全局有序的，而在低层，链表中的元素是有序的，但是排序的范围更小。通过这种方式，我们可以快速定位到目标元素所在的区间，从而加速查找操作。</p><h2 id="跳表的实现"><a href="#跳表的实现" class="headerlink" title="跳表的实现"></a>跳表的实现</h2><h3 id="1，skipnode节点"><a href="#1，skipnode节点" class="headerlink" title="1，skipnode节点"></a>1，skipnode节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">down</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2，skipList类"><a href="#2，skipList类" class="headerlink" title="2，skipList类"></a>2，skipList类</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SkipList</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">head</span>;</span></span><br><span class="line">    <span class="type">int</span> level;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3，创建跳表节点"><a href="#3，创建跳表节点" class="headerlink" title="3，创建跳表节点"></a>3，创建跳表节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> SkipNode *<span class="title function_">createSkipNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">node</span> =</span> (<span class="keyword">struct</span> SkipNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> SkipNode));</span><br><span class="line">    node -&gt; val = val;</span><br><span class="line">    node -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">    node -&gt; down = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4，创建跳表"><a href="#4，创建跳表" class="headerlink" title="4，创建跳表"></a>4，创建跳表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> SkipList *<span class="title function_">createSkipList</span><span class="params">()</span> &#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>)); <span class="comment">// 初始化随机数种子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipList</span> *<span class="title">list</span> =</span> (<span class="keyword">struct</span> SkipList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> SkipList));</span><br><span class="line">    <span class="built_in">list</span> -&gt; head = createSkipNode(INT_MIN);</span><br><span class="line">    <span class="built_in">list</span> -&gt; level = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5，生成随机层数"><a href="#5，生成随机层数" class="headerlink" title="5，生成随机层数"></a>5，生成随机层数</h3><p>这里的MID_COUNT是一个经验值，可以根据实际情况进行调整（在一定数值时最快，一般在10到20之间最快速）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_LEVEL = <span class="number">64</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MID_COUNT = <span class="number">2</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">randomLevel</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> level = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (rand() % MID_COUNT == <span class="number">0</span> &amp;&amp; level &lt; MAX_LEVEL) &#123;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6，插入节点"><a href="#6，插入节点" class="headerlink" title="6，插入节点"></a>6，插入节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertSkipList</span><span class="params">(<span class="keyword">struct</span> SkipList *<span class="built_in">list</span>, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="type">int</span> level = randomLevel();</span><br><span class="line">    <span class="keyword">if</span>( level &gt; <span class="built_in">list</span> -&gt; level) &#123;</span><br><span class="line">        <span class="keyword">for</span>(; <span class="built_in">list</span> -&gt; level &lt; level; <span class="built_in">list</span> -&gt; level++)&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">newNode</span> =</span> createSkipNode(<span class="built_in">list</span> -&gt; head -&gt; val);</span><br><span class="line">            newNode -&gt; down = <span class="built_in">list</span> -&gt; head;</span><br><span class="line">            <span class="built_in">list</span> -&gt; head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">update</span>[<span class="title">list</span> -&gt;</span> level];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">cur</span> =</span> <span class="built_in">list</span> -&gt; head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">list</span> -&gt; level - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span>(cur -&gt; next != <span class="literal">NULL</span> &amp;&amp; cur -&gt; next -&gt; val &lt; val) &#123;</span><br><span class="line">            cur = cur -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        update[i] = cur;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">newNode</span> =</span> createSkipNode(val);</span><br><span class="line">        newNode -&gt; next = update[i] -&gt; next;</span><br><span class="line">        update[i] -&gt; next = newNode;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            newNode -&gt; down = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7，查找节点"><a href="#7，查找节点" class="headerlink" title="7，查找节点"></a>7，查找节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">searchSkipList</span><span class="params">(<span class="keyword">struct</span> SkipList *<span class="built_in">list</span>, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">cur</span> =</span> <span class="built_in">list</span> -&gt; head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">list</span> -&gt; level - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span>(cur -&gt; next &amp;&amp; cur -&gt; next -&gt; val &lt; val) &#123;</span><br><span class="line">            cur = cur -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur -&gt; next &amp;&amp; cur -&gt; next -&gt; val == val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8，删除节点"><a href="#8，删除节点" class="headerlink" title="8，删除节点"></a>8，删除节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">deleteSkipList</span><span class="params">(<span class="keyword">struct</span> SkipList *<span class="built_in">list</span>, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">cur</span> =</span> <span class="built_in">list</span> -&gt; head;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">list</span> -&gt; level - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span>(cur -&gt; next &amp;&amp; cur -&gt; next -&gt; val &lt; val) &#123;</span><br><span class="line">            cur = cur -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur -&gt; next &amp;&amp; cur -&gt; next -&gt; val == val) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">temp</span> =</span> cur -&gt; next;</span><br><span class="line">            cur -&gt; next = cur -&gt; next -&gt; next;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = <span class="built_in">list</span> -&gt; head;</span><br><span class="line">    <span class="keyword">while</span>(cur -&gt; next == <span class="literal">NULL</span> &amp;&amp; <span class="built_in">list</span> -&gt; level &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">temp</span> =</span> cur;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        <span class="built_in">list</span> -&gt; level--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9，打印跳表"><a href="#9，打印跳表" class="headerlink" title="9，打印跳表"></a>9，打印跳表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printSkipList</span><span class="params">(<span class="keyword">struct</span> SkipList *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">cur</span> =</span> <span class="built_in">list</span> -&gt; head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">list</span> -&gt; level - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(; cur -&gt; next != <span class="literal">NULL</span>; cur = cur -&gt; next) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur -&gt; next-&gt; val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10，释放内存"><a href="#10，释放内存" class="headerlink" title="10，释放内存"></a>10，释放内存</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">freeSkipList</span><span class="params">(<span class="keyword">struct</span> SkipList *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">cur</span> =</span> <span class="built_in">list</span> -&gt; head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">temp</span>;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">list</span> -&gt; level - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        temp = cur -&gt; next;</span><br><span class="line">        <span class="keyword">for</span>(;temp; ) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">temp2</span> =</span> temp;</span><br><span class="line">            temp = temp -&gt; next;</span><br><span class="line">            <span class="built_in">free</span>(temp2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">SkipNode</span> *<span class="title">temp3</span> =</span> cur;</span><br><span class="line">        cur = cur -&gt; down;</span><br><span class="line">        <span class="built_in">free</span>(temp3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.ejiaimg.cn/252/2025/02/24/67bc4d83b1297.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：链表的二分查找&quot;&gt;&lt;a href=&quot;#前言：链表的二分查找&quot; class=&quot;headerlink&quot; title=&quot;前言：链表的二分查找&quot;&gt;&lt;/a&gt;前言：链表的二分查找&lt;/h2&gt;&lt;p&gt;链表与数组相比，最大的优势在于插入和删除操作的时间复杂度是O(1)，但是查找</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo初步部署日记</title>
    <link href="https://sakjijdidji55.github.io/posts/fc1c519d.html"/>
    <id>https://sakjijdidji55.github.io/posts/fc1c519d.html</id>
    <published>2025-02-23T02:24:02.000Z</published>
    <updated>2025-02-23T13:54:36.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo初步部署日记"><a href="#hexo初步部署日记" class="headerlink" title="hexo初步部署日记"></a>hexo初步部署日记</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>hexo是一款基于node.js的静态博客框架，可以快速生成静态网页托管在github上(最重要的是不用花钱)。</p><p><a href="https://github.com/">github官网</a></p><h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h2><p><a href="https://nodejs.org/en/download/">下载地址</a></p><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2. 安装git"></a>2. 安装git</h2><p><a href="https://git-scm.com/downloads">下载地址</a></p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><p>这里需要管理员权限，在终端打开管理员cmd或者win+x打开管理员powershell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果出现报错，输入下面代码(注意这是powershell时用，不是cmd)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -Scope Process -ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><h2 id="4-检查是否成功安装"><a href="#4-检查是否成功安装" class="headerlink" title="4. 检查是否成功安装"></a>4. 检查是否成功安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>出现版本号即成功安装</p><h2 id="5-配置用户名和链接到你的邮箱"><a href="#5-配置用户名和链接到你的邮箱" class="headerlink" title="5. 配置用户名和链接到你的邮箱"></a>5. 配置用户名和链接到你的邮箱</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-创建ssh密钥"><a href="#6-创建ssh密钥" class="headerlink" title="6. 创建ssh密钥"></a>6. 创建ssh密钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><h2 id="7-添加ssh密钥到github"><a href="#7-添加ssh密钥到github" class="headerlink" title="7. 添加ssh密钥到github"></a>7. 添加ssh密钥到github</h2><p>打开C:\Users\用户名.ssh\id_rsa.pub文件，复制里面的内容，打开github，点击右上角头像，点击settings，点击SSH and GPG keys，点击New SSH key，title任意，将刚刚复制的内容粘贴进key，点击Add SSH key</p><p><img src="https://i.ejiaimg.cn/252/2025/02/23/67bb24660e8a9.png" alt=""></p><h2 id="8-测试是否连接成功"><a href="#8-测试是否连接成功" class="headerlink" title="8. 测试是否连接成功"></a>8. 测试是否连接成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi yourname! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>即成功连接(注意要关掉加速器)</p><h2 id="9-创建仓库"><a href="#9-创建仓库" class="headerlink" title="9. 创建仓库"></a>9. 创建仓库</h2><p><strong><em>仓库名为yourname.github.io</em></strong>，注意要勾选Initialize this repository with a README(添加一个md文件)</p><h2 id="10-配置hexo"><a href="#10-配置hexo" class="headerlink" title="10. 配置hexo"></a>10. 配置hexo</h2><p>创建一个文件夹，用于存放博客文件</p><p>打开文件夹，右键点击更多打开Git Bash Here，也可以用powershell不过需进入文件夹</p><p>如果使用powershell，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> yourpath</span><br><span class="line"></span><br><span class="line">Set-ExecutionPolicy -Scope Process -ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>接下来二者一致</p><p><strong><em>输入</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo init</span><br></pre></td></tr></table></figure><h2 id="11-配置-config-yml"><a href="#11-配置-config-yml" class="headerlink" title="11. 配置_config.yml"></a>11. 配置_config.yml</h2><p>打开_config.yml文件，在底部1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git(你的仓库链接)</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>注意格式</p><h2 id="12-生成静态文件"><a href="#12-生成静态文件" class="headerlink" title="12. 生成静态文件"></a>12. 生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="13-本地预览"><a href="#13-本地预览" class="headerlink" title="13. 本地预览"></a>13. 本地预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器，输入localhost:4000，即可看到你的博客</p><h2 id="14-部署"><a href="#14-部署" class="headerlink" title="14. 部署"></a>14. 部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br></pre></td></tr></table></figure><p>即部署成功</p><h2 id="14-打开博客"><a href="#14-打开博客" class="headerlink" title="14. 打开博客"></a>14. 打开博客</h2><p>打开浏览器，输入yourname.github.io，即可看到你的博客(注意需要等待一段时间)</p><h2 id="15-更新博客"><a href="#15-更新博客" class="headerlink" title="15. 更新博客"></a>15. 更新博客</h2><p>在source文件夹下新建一个md文件，用markdown语法写文章</p><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;filename&quot;</span></span><br></pre></td></tr></table></figure><p>写完后保存，打开终端，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>即更新成功</p><p>最后，若是出现报错，请不要担心，可能是网络问题，多试几次即可</p><p><img src="https://i.ejiaimg.cn/252/2025/02/23/67bb0ea6828d9.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo初步部署日记&quot;&gt;&lt;a href=&quot;#hexo初步部署日记&quot; class=&quot;headerlink&quot; title=&quot;hexo初步部署日记&quot;&gt;&lt;/a&gt;hexo初步部署日记&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="hexo, github, blog, node.js,npm,git,部署博客,hexo部署" scheme="https://sakjijdidji55.github.io/tags/hexo-github-blog-node-js-npm-git-%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2-hexo%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>python搭建抢票系统</title>
    <link href="https://sakjijdidji55.github.io/posts/a3eb89f5.html"/>
    <id>https://sakjijdidji55.github.io/posts/a3eb89f5.html</id>
    <published>2025-02-22T07:28:56.000Z</published>
    <updated>2025-02-25T04:19:23.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>做一个抢票系统，使用python语言，需外部库DrissionPage，xpinyin，requests，datefinder，easygui，需用pip install安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install DrissionPage xpinyin requests datefinder easygui</span><br></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/1r-czCsynAKWWsL4_VGx2rQ?pwd=bigc">源代码下载</a></p><h3 id="代码与原理解释"><a href="#代码与原理解释" class="headerlink" title="代码与原理解释"></a>代码与原理解释</h3><h6 id="文件city-json-：存放车站名称与其缩写的对应关系"><a href="#文件city-json-：存放车站名称与其缩写的对应关系" class="headerlink" title="文件city.json ：存放车站名称与其缩写的对应关系"></a>文件city.json ：存放车站名称与其缩写的对应关系</h6><h6 id="文件text-py"><a href="#文件text-py" class="headerlink" title="文件text.py"></a>文件text.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumOptions</span><br><span class="line"></span><br><span class="line">path=<span class="string">&quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe&quot;</span></span><br><span class="line"></span><br><span class="line">ChromiumOptions().set_browser_path(path).save()</span><br></pre></td></tr></table></figure><p>path为浏览器路径，自行修改为自己的浏览器路径</p><h6 id="买票-py-购票脚本"><a href="#买票-py-购票脚本" class="headerlink" title="买票.py:购票脚本"></a>买票.py:购票脚本</h6><p><strong><em>代码</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> ChromiumPage</span><br><span class="line"><span class="keyword">import</span> datefinder</span><br><span class="line"><span class="keyword">from</span> DrissionPage.common <span class="keyword">import</span> Actions</span><br><span class="line"><span class="keyword">from</span> DrissionPage.common <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> xpinyin <span class="keyword">import</span> Pinyin</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> prettytable <span class="keyword">import</span> PrettyTable</span><br><span class="line"><span class="keyword">import</span> easygui <span class="keyword">as</span> eg</span><br></pre></td></tr></table></figure><p>这里是导入必要的库</p><p><strong><em>代码</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取城市数据</span></span><br><span class="line">city = <span class="built_in">open</span>(<span class="string">&#x27;city.json&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>).read()</span><br><span class="line">city_data=json.loads(city)</span><br><span class="line"><span class="comment"># 初始化拼音转换器</span></span><br><span class="line">p=Pinyin()</span><br><span class="line"><span class="comment"># 输入出发地、目的地和出发日期</span></span><br><span class="line">from_station = <span class="built_in">input</span>(<span class="string">&#x27;请输入出发地：&#x27;</span>)</span><br><span class="line">to_station = <span class="built_in">input</span>(<span class="string">&#x27;请输入目的地：&#x27;</span>)</span><br><span class="line">t=<span class="built_in">input</span>(<span class="string">&#x27;请输入出发日期：&#x27;</span>)</span><br><span class="line"><span class="comment"># 去除出发地和目的地中的“市”和“省”</span></span><br><span class="line">from_station = from_station.replace(<span class="string">&#x27;市&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;省&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">to_station = to_station.replace(<span class="string">&#x27;市&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;省&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 去除出发地和目的地中的空格</span></span><br><span class="line">from_station = from_station.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">to_station = to_station.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 将出发日期转换为标准格式</span></span><br><span class="line">t = t.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">t = <span class="built_in">list</span>(datefinder.find_dates(t))[<span class="number">0</span>].strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br></pre></td></tr></table></figure><p>获取必要信息，并去除空格和“市”和“省”<br>导入json文件，注意路径<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义请求头</span></span><br><span class="line">header=&#123;</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>:<span class="string">&#x27;_uab_collina=173561388454686188444398; JSESSIONID=69F1DF07023FABA2F9CD511ECA061CBF; tk=ErJAWp3emfiaNqewtj1DW6W2JhG8COmxsbHEyGBMj-E27T1T0;_jc_save_wfdc_flag=dc; BIGipServerotn=1306\</span></span><br><span class="line"><span class="string">        067210.50210.0000; BIGipServerpassport=803733770.50215.0000; guidesStatus=off; highContrastMode=defaltMode; cursorStatus=off; route=c5c62a339e7744272a54643b3be5bf64; _jc_save_fromStation=%u6DF1%u\</span></span><br><span class="line"><span class="string">        5733%u5317%2CIOQ; _jc_save_toStation=%u5E7F%u5DDE%2CGZQ; _jc_save_toDate=2025-02-06; uKey=df928997f71064aa2a8dd2fe666c6d2ca22e4e3134b3b417871590e07fd6473a; _jc_save_fromDate=2025-02-06; BIGipServerportal=3151233290.17183.0000&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36 Edg/132.0.0.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">URL=<span class="string">f&quot;https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=<span class="subst">&#123;t&#125;</span>&amp;leftTicketDTO.from_station=<span class="subst">&#123;city_data[from_station]&#125;</span>&amp;leftTicketDTO.to_station=<span class="subst">&#123;city_data[to_station]&#125;</span>&amp;purpose_codes=ADULT&quot;</span></span><br><span class="line"></span><br><span class="line">response=requests.get(URL,headers=header)</span><br><span class="line">results=response.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;result&#x27;</span>]</span><br></pre></td></tr></table></figure><br>爬虫爬到车票信息</p><p>解析</p><p><strong><em>代码</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化表格</span></span><br><span class="line">tb=PrettyTable()</span><br><span class="line">tb.field_names=[<span class="string">&#x27;序号&#x27;</span>,<span class="string">&#x27;车次&#x27;</span>,<span class="string">&#x27;出发时间&#x27;</span>,<span class="string">&#x27;到达时间&#x27;</span>,<span class="string">&#x27;历时&#x27;</span>,<span class="string">&#x27;商务座&#x27;</span>,<span class="string">&#x27;一等座&#x27;</span>,<span class="string">&#x27;二等座&#x27;</span>,<span class="string">&#x27;软卧&#x27;</span>,<span class="string">&#x27;硬卧&#x27;</span>,<span class="string">&#x27;硬座&#x27;</span>,<span class="string">&#x27;无座&#x27;</span>]</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="comment"># 遍历结果列表</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    <span class="comment"># 将结果按&#x27;|&#x27;分割</span></span><br><span class="line">    date=result.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取车次号</span></span><br><span class="line">    train_number=date[<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># 获取出发时间</span></span><br><span class="line">    start_time=date[<span class="number">8</span>]</span><br><span class="line">    <span class="comment"># 获取到达时间</span></span><br><span class="line">    end_time=date[<span class="number">9</span>]</span><br><span class="line">    <span class="comment"># 获取用时</span></span><br><span class="line">    used_time=date[<span class="number">10</span>]</span><br><span class="line">    <span class="comment"># 获取二等座剩余票数</span></span><br><span class="line">    second_seats=date[<span class="number">30</span>]</span><br><span class="line">    <span class="comment"># 获取一等座剩余票数</span></span><br><span class="line">    first_seats=date[<span class="number">31</span>]</span><br><span class="line">    <span class="comment"># 获取商务座剩余票数</span></span><br><span class="line">    Business_seats=date[<span class="number">32</span>]</span><br><span class="line">    <span class="comment"># 获取硬座剩余票数</span></span><br><span class="line">    hard_seats=date[<span class="number">29</span>]</span><br><span class="line">    <span class="comment"># 获取硬卧剩余票数</span></span><br><span class="line">    hard_sleep_seats=date[<span class="number">28</span>]</span><br><span class="line">    <span class="comment"># 获取软卧剩余票数</span></span><br><span class="line">    soft_sleep_seats=date[<span class="number">23</span>]</span><br><span class="line">    <span class="comment"># 获取无座剩余票数</span></span><br><span class="line">    no_seats=date[<span class="number">26</span>]</span><br><span class="line">    <span class="comment"># 添加一行数据到表格</span></span><br><span class="line">    tb.add_row(</span><br><span class="line">        [</span><br><span class="line">        count,</span><br><span class="line">        train_number,</span><br><span class="line">        start_time,</span><br><span class="line">        end_time,</span><br><span class="line">        used_time,</span><br><span class="line">        Business_seats,</span><br><span class="line">        first_seats,</span><br><span class="line">        second_seats,</span><br><span class="line">        soft_sleep_seats,</span><br><span class="line">        hard_sleep_seats,</span><br><span class="line">        hard_seats,</span><br><span class="line">        no_seats</span><br><span class="line">        ]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><br>这里要拼音的原因即为网站要模拟人进行键盘输入</p><p><strong><em>代码</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取出发城市的拼音</span></span><br><span class="line">from_station = p.get_pinyin(from_station, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取目的地的拼音</span></span><br><span class="line">to_station = p.get_pinyin(to_station, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取要预定的车次序号</span></span><br><span class="line">page_count = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入要预定的车次序号：&#x27;</span>))</span><br><span class="line"><span class="comment"># 获取乘客在乘车人中的位置</span></span><br><span class="line">passenger = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入乘客在乘车人中的位置：&#x27;</span>))</span><br><span class="line"><span class="comment"># 将乘客位置减1</span></span><br><span class="line">passenger = passenger - <span class="number">1</span></span><br></pre></td></tr></table></figure><br>模拟浏览器操作买票</p><p><strong><em>代码</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建ChromiumPage对象</span></span><br><span class="line">dp = ChromiumPage()</span><br><span class="line"><span class="comment"># 创建Actions对象</span></span><br><span class="line">ac = Actions(dp)</span><br><span class="line"><span class="comment"># 打开12306网站</span></span><br><span class="line">dp.get(<span class="string">&#x27;https://kyfw.12306.cn/otn/leftTicket/init&#x27;</span>)</span><br><span class="line"><span class="comment"># 点击登录按钮</span></span><br><span class="line">dp.ele(<span class="string">&#x27;css:#login_user&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 扫码登录后按回车键</span></span><br><span class="line">s=<span class="built_in">input</span>(<span class="string">&#x27;请扫码登录后按回车键&#x27;</span>)</span><br><span class="line"><span class="comment"># 点击车票按钮</span></span><br><span class="line">dp.ele(<span class="string">&#x27;css:#link_for_ticket&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 等待0.5秒</span></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 出发城市</span></span><br><span class="line">ac.move_to(<span class="string">&#x27;css:#fromStationText&#x27;</span>).click().<span class="built_in">type</span>(from_station)</span><br><span class="line">dp.ele(<span class="string">&#x27;css:#fromStationText&#x27;</span>).<span class="built_in">input</span>(Keys.ENTER)</span><br><span class="line"><span class="comment"># 目的地</span></span><br><span class="line">ac.move_to(<span class="string">&#x27;css:#toStationText&#x27;</span>).click().<span class="built_in">type</span>(to_station)</span><br><span class="line">dp.ele(<span class="string">&#x27;css:#toStationText&#x27;</span>).<span class="built_in">input</span>(Keys.ENTER)</span><br><span class="line"><span class="comment"># 出发日期</span></span><br><span class="line">dp.ele(<span class="string">&#x27;css:#train_date&#x27;</span>).clear()</span><br><span class="line">dp.ele(<span class="string">&#x27;css:#train_date&#x27;</span>).<span class="built_in">input</span>(t)</span><br><span class="line"><span class="comment"># 点击查询按钮</span></span><br><span class="line">dp.ele(<span class="string">&#x27;css:#query_ticket&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 点击车次按钮</span></span><br><span class="line">dp.ele(<span class="string">f&#x27;css:#queryLeftTable tr:nth-child(<span class="subst">&#123;page_count*<span class="number">2</span>-<span class="number">1</span>&#125;</span>) .btn72&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">dp.ele(<span class="string">f&#x27;css:#normalPassenger_<span class="subst">&#123;passenger&#125;</span>&#x27;</span>).click() <span class="comment">#  点击选择乘客</span></span><br><span class="line">dp.ele(<span class="string">&#x27;css:#submitOrder_id&#x27;</span>).click() <span class="comment">#  点击提交订单</span></span><br><span class="line">time.sleep(<span class="number">1</span>) <span class="comment">#  等待1秒</span></span><br><span class="line">ac.move_to(<span class="string">&#x27;css:#qr_submit_id&#x27;</span>).click() <span class="comment">#  移动到二维码提交按钮并点击</span></span><br></pre></td></tr></table></figure></p><h6 id="抢票-py"><a href="#抢票-py" class="headerlink" title="抢票.py"></a>抢票.py</h6><p>与买票基本相同，没有爬虫获得信息操作，直接模拟浏览器操作买票<br><strong><em>代码</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不同点：模拟抢票点击操作</span></span><br><span class="line">temp = dp.ele(<span class="string">f&#x27;css:#queryLeftTable tr:nth-child(<span class="subst">&#123;page_count*<span class="number">2</span>-<span class="number">1</span>&#125;</span>) .btn72&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 点击车次按钮</span></span><br><span class="line"><span class="keyword">if</span> temp:</span><br><span class="line">    state = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 如果点击成功，设置状态为False </span></span><br><span class="line"><span class="keyword">while</span> state == <span class="literal">True</span>:</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 循环查询车次，直到点击成功</span></span><br><span class="line">    dp.ele(<span class="string">&#x27;css:#query_ticket&#x27;</span>).click()</span><br><span class="line">    temp = dp.ele(<span class="string">f&#x27;css:#queryLeftTable tr:nth-child(<span class="subst">&#123;page_count*<span class="number">2</span>-<span class="number">1</span>&#125;</span>) .btn72&#x27;</span>).click()</span><br><span class="line">    <span class="keyword">if</span> temp:</span><br><span class="line">        state = <span class="literal">False</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><h4 id="结束，谢谢观看"><a href="#结束，谢谢观看" class="headerlink" title="结束，谢谢观看"></a>结束，谢谢观看</h4><p><img src="https://i.ejiaimg.cn/252/2025/02/24/67bc4b3acc56a.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;做一个抢票系统，使用python语言，需外部库DrissionPage，xpinyin，requests，datefinder，easygu</summary>
      
    
    
    
    
    <category term="抢票,python, 抢票系统" scheme="https://sakjijdidji55.github.io/tags/%E6%8A%A2%E7%A5%A8-python-%E6%8A%A2%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>FirstPessage</title>
    <link href="https://sakjijdidji55.github.io/posts/7eff628e.html"/>
    <id>https://sakjijdidji55.github.io/posts/7eff628e.html</id>
    <published>2025-02-21T09:50:49.000Z</published>
    <updated>2025-02-24T10:38:25.437Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开启博客新征程"><a href="#开启博客新征程" class="headerlink" title="开启博客新征程"></a>开启博客新征程</h3><p>​    今天，我的初创博客正式上线了。</p><p>​    这是一次发文尝试，也是标志成功搭建博客。</p><p>​    以下是平台的主要菜单选项，通过这些菜单，你可以快速进入不同的页面，开启追番之旅。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">追番:</span> <span class="string">/bangumis/index.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>Home（首页）</strong>：链接为 <code>/</code> ，点击这个选项，你可以回到平台的首页，在这里你可以浏览到平台的最新动态、推荐内容等。图标为 <code>fas fa-home</code> ，代表着 “家” 的概念，方便你随时回到起始页面。</p></li><li><p><strong>追番</strong>：链接是 <code>/bangumis/index.html</code> ，这个页面是追番的核心区域。在这里，你可以找到各种各样的动漫作品，无论是热门新番还是经典老番，都能满足你的追番需求。同样，图标也是 <code>fas fa-home</code> ，便于你识别和点击。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;开启博客新征程&quot;&gt;&lt;a href=&quot;#开启博客新征程&quot; class=&quot;headerlink&quot; title=&quot;开启博客新征程&quot;&gt;&lt;/a&gt;开启博客新征程&lt;/h3&gt;&lt;p&gt;​    今天，我的初创博客正式上线了。&lt;/p&gt;
&lt;p&gt;​    这是一次发文尝试，也是标志成功搭建</summary>
      
    
    
    
    
    <category term="大家好，我是迷路的小朋友" scheme="https://sakjijdidji55.github.io/tags/%E5%A4%A7%E5%AE%B6%E5%A5%BD%EF%BC%8C%E6%88%91%E6%98%AF%E8%BF%B7%E8%B7%AF%E7%9A%84%E5%B0%8F%E6%9C%8B%E5%8F%8B/"/>
    
  </entry>
  
</feed>
